{"version":3,"file":"bundle.js","mappings":"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,SAAatB,GAEX,IAAIhuB,EAEJ,IAAKA,KAAOsvB,EAEV,GAAItB,EAAKhuB,KAASsvB,EAAMtvB,GAAM,OAAO,EAGvC,OAAO,CACT,GACF,CAlEwD,CAAaH,GAG/D,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,MAAM,IAAId,MAAM,+CAEpB,EAkFF,SAAS,GAAYuwB,GACnB,OAQA,SAAmBtB,KAASoB,GAC1B,OAAOQ,QACL5B,GACkB,iBAATA,GACP,SAAUA,GAEV4B,QAAQN,EAAM1xB,KAAKzE,KAAM60B,KAASoB,IAExC,CACF,CAEA,SAAS,KACP,OAAO,CACT,CC3SO,MAAM+G,GAAS,CACpB,UACA,UACA,QACA,aACA,OACA,KACA,UACA,SACA,MACA,WACA,KACA,SACA,MACA,MACA,KACA,KACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,SACA,KACA,KACA,UACA,OACA,OACA,MACA,KACA,WACA,SACA,IACA,YACA,MACA,UACA,UACA,QACA,QACA,KACA,KACA,QACA,KACA,KACA,QACA,KACA,KACA,MACA,OC3DWpqB,GAAU,CAErB,SACA,QACA,SACA,YCLWqqB,GAAY,CACvB,OACA,OACA,WACA,SACA,WACA,OACA,OACA,OACA,UACA,WACA,QACA,KACA,SACA,SACA,QACA,WACA,QACA,SCgDIC,GAAgB,GAAQ,CAAC,UAAW,YAO3B,SAASC,GAAuBj1B,EAAU,CAAC,GACxD,MAAMk1B,EAyOR,SAAyBz8B,GACvB,OAMA,SAAkBwH,GAChB,OAAOqB,OAAOrB,GAAOxH,QAAQ,kBAAmBA,EAClD,CACF,CAnPmB08B,CACfn1B,EAAQo1B,SAAWC,GAAkBC,IAGvC,OAAQxG,IACNyG,GAAOzG,EAAM,CAACoG,WAAUM,WAAY,UAAS,CAEjD,CAOA,SAASD,GAAO5I,EAAM+H,GACpB,GAAI,aAAc/H,EAAM,CACtB,MAAM8I,EAAW94B,OAAOmG,OAAO,CAAC,EAAG4xB,GASnC,OAPkB,SAAd/H,EAAKnzB,MAAmBk8B,GAAU/I,MACpC8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","sources":["webpack://google-docs-to-markdown/./node_modules/debug/src/browser.js","webpack://google-docs-to-markdown/./node_modules/debug/src/common.js","webpack://google-docs-to-markdown/./node_modules/extend/index.js","webpack://google-docs-to-markdown/./node_modules/is-buffer/index.js","webpack://google-docs-to-markdown/./node_modules/ms/index.js","webpack://google-docs-to-markdown/webpack/bootstrap","webpack://google-docs-to-markdown/webpack/runtime/define property getters","webpack://google-docs-to-markdown/webpack/runtime/hasOwnProperty shorthand","webpack://google-docs-to-markdown/webpack/runtime/make namespace object","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/schema.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/merge.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/normalize.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/info.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/types.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/defined-info.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/create.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xlink.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xml.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xmlns.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/aria.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/html.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/svg.js","webpack://google-docs-to-markdown/./node_modules/property-information/index.js","webpack://google-docs-to-markdown/./node_modules/comma-separated-tokens/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-parse-selector/lib/index.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/find.js","webpack://google-docs-to-markdown/./node_modules/space-separated-tokens/index.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/create-h.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit-parents/node_modules/unist-util-is/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./node_modules/github-slugger/regex.js","webpack://google-docs-to-markdown/./node_modules/github-slugger/index.js","webpack://google-docs-to-markdown/./lib/css.js","webpack://google-docs-to-markdown/./lib/fix-google-html.js","webpack://google-docs-to-markdown/./node_modules/web-namespaces/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hast-util-parse-selector/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/core.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/svg.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/html.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-dom-parse/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/own.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap-text.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/one.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/all.js","webpack://google-docs-to-markdown/./node_modules/hast-util-is-element/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-embedded/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-is/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/block.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/content.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/skippable.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-whitespace/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-phrasing/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap-children.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/resolve.js","webpack://google-docs-to-markdown/./node_modules/unist-util-find-after/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-text/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/code.js","webpack://google-docs-to-markdown/./node_modules/trim-trailing-lines/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/del.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/list-items-spread.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/dl.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/em.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/heading.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/img.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/inline-code.js","webpack://google-docs-to-markdown/./node_modules/hast-util-has-property/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/find-selected-options.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/input.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/li.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/list.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-string/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/media.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/p.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/strong.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table-cell.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/root.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/text.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/comment.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/a.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/base.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/blockquote.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/br.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/hr.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/iframe.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/q.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/select.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/textarea.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table-row.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/wbr.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-remark/lib/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-chunked/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-combine-extensions/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-character/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-factory-space/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-normalize-identifier/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-classify-character/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-resolve-all/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/ccount/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://google-docs-to-markdown/./node_modules/decode-named-character-reference/index.dom.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-decode-string/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://google-docs-to-markdown/./node_modules/markdown-table/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://google-docs-to-markdown/./node_modules/zwitch/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/configure.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://google-docs-to-markdown/./node_modules/longest-streak/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/join.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/unsafe.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/index.js","webpack://google-docs-to-markdown/./node_modules/bail/index.js","webpack://google-docs-to-markdown/./node_modules/is-plain-obj/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-stringify-position/index.js","webpack://google-docs-to-markdown/./node_modules/vfile-message/index.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minpath.browser.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minproc.browser.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minurl.shared.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/index.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minurl.browser.js","webpack://google-docs-to-markdown/./node_modules/unified/lib/index.js","webpack://google-docs-to-markdown/./node_modules/trough/index.js","webpack://google-docs-to-markdown/./lib/convert.js","webpack://google-docs-to-markdown/./lib/rehype-to-remark-with-spaces.js","webpack://google-docs-to-markdown/./node_modules/remark-gfm/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm/lib/index.js","webpack://google-docs-to-markdown/./node_modules/remark-stringify/lib/index.js","webpack://google-docs-to-markdown/./index.js"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Object.<string, Info>} Properties\n * @typedef {Object.<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","import {Schema} from './schema.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n/**\n * @param {import('./schema.js').Schema[]} definitions\n * @param {string} space\n * @returns {import('./schema.js').Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  var index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    this.property = property\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.attribute = null\nInfo.prototype.property = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","var powers = 0\n\nexport var boolean = increment()\nexport var booleanish = increment()\nexport var overloadedBoolean = increment()\nexport var number = increment()\nexport var spaceSeparated = increment()\nexport var commaSeparated = increment()\nexport var commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\nvar checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    var index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    while (++index < checks.length) {\n      mark(\n        this,\n        checks[index],\n        (mask & types[checks[index]]) === types[checks[index]]\n      )\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {InstanceType<typeof DefinedInfo>} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","import {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n * @typedef {import('./info.js').Info} Info\n */\n\n/**\n * @typedef {Object.<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Object.<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array.<string>} [mustUseProperty]\n */\n\nvar own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {import('./schema.js').Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  /** @type {string} */\n  var prop\n  /** @type {Info} */\n  var info\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes, prop),\n        definition.properties[prop],\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport var xlink = create({\n  space: 'xlink',\n  transform: xlinkTransform,\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xlinkTransform(_, prop) {\n  return 'xlink:' + prop.slice(5).toLowerCase()\n}\n","import {create} from './util/create.js'\n\nexport var xml = create({\n  space: 'xml',\n  transform: xmlTransform,\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xmlTransform(_, prop) {\n  return 'xml:' + prop.slice(3).toLowerCase()\n}\n","/**\n * @param {Object.<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Object.<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport var aria = create({\n  transform: ariaTransform,\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction ariaTransform(_, prop) {\n  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n}\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: commaSeparated,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextMenu: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: commaSeparated,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport var svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport var html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport var svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","import {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nvar valid = /^data[-\\w.:]+$/i\nvar dash = /-[a-z]/g\nvar cap = /[A-Z]/g\n\n/**\n * @param {import('./util/schema.js').Schema} schema\n * @param {string} value\n * @returns {import('./util/info.js').Info}\n */\nexport function find(schema, value) {\n  var normal = normalize(value)\n  var prop = value\n  var Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value)\n    } else {\n      value = datasetToAttribute(value)\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} attribute\n * @returns {string}\n */\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase)\n  return 'data' + value.charAt(0).toUpperCase() + value.slice(1)\n}\n\n/**\n * @param {string} property\n * @returns {string}\n */\nfunction datasetToAttribute(property) {\n  var value = property.slice(4)\n\n  if (dash.test(value)) {\n    return property\n  }\n\n  value = value.replace(cap, kebab)\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value\n  }\n\n  return 'data' + value\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      } else {\n        children.unshift(properties)\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","/**\n * Light-Weight CSS Tooling\n *\n * The code here is meant to be a pretty light-weight and minimal approach to\n * CSS handling that meets the needs of the rest of the GDoc2Md library. It is\n * not meant to apply much validation or strictness to the CSS it handles, or\n * to handle particularly complex CSS content that we don't expect to see from\n * Google Docs.\n *\n * If our needs get drastically more complex in the future, we should switch to\n * using a dedicated third-party CSS parser like css-tree or postcss.\n */\n\n/** @typedef {{[index: string]: string}} Style */\n\n/**\n * Check whether a string is empty or only contains whitespace.\n * @param {string} text\n * @returns {boolean}\n */\nfunction isBlank(text) {\n  return /^\\s*$/.test(text);\n}\n\n/**\n * Parse a CSS property list (e.g. from an HTML `style` attribute) into a simple\n * object where the keys are the property names and the values are the property\n * values (as strings).\n * Value strings are lower-cased for easier handling (since most CSS values are\n * case insensitive), but this doesn't break out individual properties from\n * shorthand properties or do other specialized property/value handling.\n * @param {string} text\n * @returns {Style}\n */\nexport function parseCssPropertyList(text) {\n  const properties = Object.create(null);\n  if (!text) return properties;\n\n  // This is pretty simplistic, and there are significant caveats:\n  // - The semicolon could be inside a quoted string, in which case it shouldn't\n  //   split properties.\n  // - The property names and values are not limited to the actual allowed\n  //   characters (the rules used here are much simpler than in real CSS).\n  //\n  // For the most part, this library doesn't need to be too concerned with\n  // invalid input. We expect to be working with valid HTML & CSS that was\n  // output by Google Docs. We haven't seen content that violates the above\n  // caveats, so this is OK for now, but that could potentially change.\n  for (const property of text.split(';')) {\n    if (isBlank(property)) continue;\n\n    try {\n      const {name, value} = property\n        .match(/^\\s*(?<name>[\\w-]+)\\s*:\\s*(?<value>.+)\\s*$/)\n        .groups;\n      // Lower-case values for easier lookups and comparisons. Technically this\n      // should only happen for parts of the value that are not quoted.\n      properties[name] = value.toLowerCase();\n    }\n    catch(error) {\n      console.warn(`Could not parse CSS property \"${property}\" (${error})`);\n    }\n  }\n\n  return properties;\n}\n\n/**\n * Get the content of the node's `style` attribute as a parsed object. This\n * caches the results on the node for easy retrieval.\n * @param {RehypeNode} node\n * @returns {Style}\n */\nfunction getNodeStyle(node) {\n  return node._style ||= parseCssPropertyList(node.properties?.style);\n}\n\n/**\n * Resolve the actual, inherited value of a single style property based on the\n * whole tree of nodes. This caches results on the node for easy retrieval.\n * @param {string} propertyName\n * @param {RehypeNode} node\n * @param {RehypeNode[]} ancestors List of ancestor nodes, ordered shallowest to\n *        deepest in the tree.\n * @returns {string|undefined}\n */\nfunction getResolvedStyleProperty(propertyName, node, ancestors) {\n  node._resolvedStyle ||= Object.create(null);\n  if (propertyName in node._resolvedStyle) {\n    return node._resolvedStyle[propertyName];\n  }\n\n  let value = getNodeStyle(node)[propertyName];\n  if ((value && value !== 'inherit') || !ancestors?.length) {\n    node._resolvedStyle[propertyName] = value;\n    return value;\n  }\n\n  // WARNING: Not all properties are inheritable, but this code doesn't check\n  // for inheritability. If it turns out we need to do so, MDN has nice data\n  // to build an allow/block-list from:\n  // https://github.com/mdn/data/blob/main/css/properties.json\n  const parentAncestors = ancestors.slice(0, -1);\n  const parent = ancestors[parentAncestors.length];\n  return getResolvedStyleProperty(propertyName, parent, parentAncestors);\n}\n\n/**\n * Get an object with properties representing a node's fully resolved styles,\n * including anything inherited from ancestors.\n * @param {RehypeNode} node\n * @param {RehypeNode[]} ancestors Ancestors of `node`, starting with the tree\n *        root and ending with the parent of `node`.\n * @returns {Style}\n */\nexport function resolveNodeStyle(node, ancestors) {\n  return new Proxy(Object.create(null), {\n    get (target, property, _receiver) {\n      if (!(property in target)) {\n        target[property] = getResolvedStyleProperty(property, node, ancestors);\n      }\n      return target[property];\n    }\n  });\n}\n","'use strict';\n\nimport { h as hast } from 'hastscript';\nimport { CONTINUE, EXIT, visit } from 'unist-util-visit';\nimport { visitParents } from 'unist-util-visit-parents';\nimport GithubSlugger from 'github-slugger';\nimport debug from 'debug'\nimport { resolveNodeStyle } from './css.js';\n\nconst log = debug('app:fix-google-html:debug');\n\nconst blockElements = new Set([\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'caption',\n  'center',  // historic\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',  // historic\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'frameset',  // historic\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'isindex',  // historic\n  'li',\n  'main',\n  'menu',\n  'nav',\n  'noframes',  // historic\n  'ol',\n  'p',\n  'pre',\n  'section',\n  'summary',\n  'table',\n  'thead',\n  'tbody',\n  'tfoot',\n  'td',\n  'th',\n  'tr',\n  'ul'\n]);\n\n// These elements convert to Markdown nodes that can't start or end with spaces.\n// For example, you can't start emphasis with a space: `This * is emphasized*`.\nconst spaceSensitiveElements = new Set([\n  'em',\n  'strong',\n]);\n\nconst isList = node => node.tagName === 'ul' || node.tagName === 'ol';\nconst isStyled = node => node.type === 'element' && node.properties.style;\nconst isBlock = node => node && blockElements.has(node.tagName);\nconst isSpaceSensitive = node => node && spaceSensitiveElements.has(node.tagName);\nconst isCell = (node) => node.tagName === 'th' || node.tagName === 'td';\nconst isAnchor = (node) => node.tagName === 'a';\n\nconst spaceAtStartPattern = /^(\\s+)/;\nconst spaceAtEndPattern = /(\\s+)$/;\n\n// Wrap the children of `node` with the `wrapper` node.\nfunction wrapChildren (node, wrapper) {\n  wrapper.children = node.children;\n  node.children = [wrapper];\n  return wrapper;\n}\n\n/**\n * Fix the incorrect formatting of nested lists in Google Docs's HTML. Lists\n * can only have `div` and `li` children, but Google Docs has other lists as\n * direct descendents. This moves those free-floating lists into the previous\n * `li` element under the assumption that they represent subitems of it.\n *\n * @param {RehypeNode} node Fix the tree below this node\n *\n * @example\n * Input a tree like:\n *    <ul>\n *      <li>An item!</li>\n *      <ul>\n *        <li>A subitem!</li>\n *      </ul>\n *    </ul>\n *\n * Output:\n *    <ul>\n *      <li>An Item!\n *        <ul>\n *          <li>A subitem!</li>\n *        </ul>\n *      </li>\n *    </ul>\n */\nexport function fixNestedLists (node) {\n  visit(node, isList, (node, index, parent) => {\n    if (isList(parent)) {\n      const previous = parent.children[index - 1];\n      if (previous && previous.tagName === 'li') {\n        previous.children.push(node);\n        parent.children.splice(index, 1);\n        return index;\n      }\n      else {\n        console.warn('No previous list item to move nested list into!');\n      }\n    }\n  });\n}\n\n/**\n * Google Docs does italics/bolds/etc on `<span>`s with style attributes, but\n * rehype-remark does not pick up on those. Instead, transform them into\n * semantic `em`, `strong`, etc. elements.\n *\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function unInlineStyles (node) {\n  convertInlineStylesToElements(node);\n  mergeConsecutiveInlineStyles(node);\n}\n\n/**\n * @private\n * Convert CSS in style attribtutes to semantic elements that are more readily\n * converted to Markdown.\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction convertInlineStylesToElements(node) {\n  visitParents(node, n => isStyled(n) && !isBlock(n), (node, parents) => {\n    const style = resolveNodeStyle(node, parents);\n\n    if (style['font-style'] === 'italic') {\n      wrapChildren(node, hast('em'));\n    }\n\n    const weight = style['font-weight'];\n    if (weight === 'bold' || weight === '700') {\n      wrapChildren(node, hast('strong'));\n    }\n\n    const verticalAlign = style['vertical-align'];\n    if (verticalAlign === 'super') {\n      wrapChildren(node, hast('sup'));\n    }\n    else if (verticalAlign === 'sub') {\n      wrapChildren(node, hast('sub'));\n    }\n\n    // Some browsers paste with the `text-decoration` property and some use the\n    // newer `text-decoration-line`, so we need to support both.\n    const decorationLine = style['text-decoration'] || style['text-decoration-line'];\n    if (decorationLine?.startsWith('line-through')) {\n      wrapChildren(node, hast('del'));\n    }\n\n    // Google docs doesn't really have anything that represents \"code\", so infer\n    // it from the use of monospace fonts.\n    if (/,\\s*monospace/.test(style['font-family'])) {\n      wrapChildren(node, hast('code'));\n    }\n\n    // Keep the structure as flat as possible by removing semantically\n    // meaningless elements once we've extracted formatting from them.\n    if (node.tagName === 'span') {\n      const parent = parents[parents.length - 1];\n      const index = parent.children.indexOf(node);\n      if (index === -1) {\n        throw new Error('Could not find visited node in its parent');\n      }\n\n      const childrenCount = node.children.length;\n      parent.children.splice(index, 1, ...node.children);\n      return index + childrenCount;\n    }\n  });\n}\n\n/**\n * @private\n * Find consecutive inline elements of the same type and merge their contents.\n * For example, this would convert:\n *\n *     <code>const </code><code>name</code>\n *\n * To:\n *\n *     <code>const name</code>\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction mergeConsecutiveInlineStyles (node) {\n  visit(node, n => n.tagName && n.children?.length, (node, _index, _parent) => {\n    const newChildren = [];\n    let activeNode = null;\n    for (const child of node.children) {\n      if (activeNode) {\n        if (child.tagName === activeNode.tagName) {\n          activeNode.children.push(...child.children);\n        }\n        else {\n          activeNode = null;\n        }\n      }\n      if (!activeNode) {\n        newChildren.push(child);\n        if (child.tagName && !isBlock(child)) {\n          activeNode = child;\n        }\n      }\n    }\n    node.children = newChildren;\n  });\n}\n\n/**\n * Line breaks frequently wind up wrapped with a somewhat pointless `<span>`\n * element that makes them hard to deal correctly with. Unwrap those line breaks\n * so that they are bare `<br>` elements.\n *\n * Changes this:\n *     <span><br></span>\n * To:\n *     <br>\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function unwrapLineBreaks (node) {\n  const children = node.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (\n      child.tagName === 'span'\n      && child.children.length === 1\n      && child.children[0].tagName === 'br'\n    ) {\n      children.splice(i, 1, child.children[0]);\n    }\n    else if (child.children) {\n      unwrapLineBreaks(child);\n    }\n  }\n  node.children = children;\n}\n\n/**\n * Moves linebreaks outside of anchor elements,\n * if the linebreak is the first and/or last child of the anchor.\n * @param {RehypeNode} node\n */\nexport function moveLinebreaksOutsideOfAnchors (node) {\n  visit(node, isAnchor, (node, index, parent) => {\n    const children = node.children;\n    if (children[children.length - 1]?.tagName === 'br') {\n      const endingBr = children.pop()\n      parent.children.splice(index + 1, 0, endingBr);\n    }\n    if (children[0]?.tagName === 'br') {\n      const beginningBr = children.shift()\n      parent.children.splice(index, 0, beginningBr);\n    }\n  });\n}\n\n/**\n * Paragraphs and other block elements frequently wind up preceded with\n * pointless `<br>` elements. This is probably because paragraphs do not, by\n * default, have any space around them in a Google doc, even though having a\n * blank line is what causes Google Docs to spit out `<p>` elements instead of\n * just `<br>` elements.\n *\n * Changes this:\n *     <br><p>Blah</p>\n * To:\n *     <p>Blah</p>\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function removeLineBreaksBeforeBlocks (node) {\n  const children = node.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.tagName === 'br' && isBlock(children[i + 1])) {\n      children.splice(i, 1);\n      i -= 1;\n    }\n    else if (child.children) {\n      removeLineBreaksBeforeBlocks(child);\n    }\n  }\n  node.children = children;\n}\n\n/**\n * Remove spaces from the start or end of nodes where it's not valid in Markdown\n * (e.g. `<em>`) and return the removed spaces. Works recursively to handle\n * nested nodes with surrounding spaces.\n * @param {RehypeNode} node\n * @returns {string}\n */\nfunction _extractInvalidSpace (node, side = 'start') {\n  let totalSpace = '';\n\n  const reverse = side === 'start' ? false : true;\n  visit(node, (child, index, parent) => {\n    if (child.type === 'text') {\n      const pattern = side === 'start' ? spaceAtStartPattern : spaceAtEndPattern;\n      const spaceMatch = child.value.match(pattern);\n      if (spaceMatch) {\n        const space = spaceMatch[1];\n        const body = side === 'start'\n          ? child.value.slice(space.length)\n          : child.value.slice(0, -space.length);\n        totalSpace = side === 'start'\n          ? (totalSpace + space)\n          : (space + totalSpace);\n        if (body.length) {\n          child.value = body;\n          return EXIT;\n        }\n        else {\n          parent.children.splice(index, 1);\n          return side === 'start' ? index : index - 1;\n        }\n      }\n      else {\n        return EXIT;\n      }\n    }\n    else if (isSpaceSensitive(child)) {\n      return CONTINUE;\n    }\n    else {\n      return EXIT;\n    }\n  }, reverse);\n\n  return totalSpace;\n}\n\n/**\n * In Google Docs (and HTML in general), an element that formats some text can\n * start with spaces, tabs, etc. However, in Markdown, some inline markup\n * (mainly emphasis marks like `**bold**` and `_italic_`) can't start or end\n * with spaces. This finds such elements and moves leading and trailing spaces\n * from inside to outside them.\n *\n * For example, this turns a tree like:\n *\n *     <p>Hello<em> italics </em></p>\n *\n * Into:\n *\n *     <p>Hello <em>italics</em> </p>\n *\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function moveSpaceOutsideSensitiveChildren (node) {\n  visit(node, isSpaceSensitive, (node, index, parent) => {\n    let nextIndex = index + 1;\n\n    const startSpace = _extractInvalidSpace(node, 'start');\n    if (startSpace) {\n      parent.children.splice(index, 0, { type: 'text', value: startSpace });\n      nextIndex++;\n    }\n\n    const endSpace = _extractInvalidSpace(node, 'end');\n    if (endSpace) {\n      parent.children.splice(nextIndex, 0, { type: 'text', value: endSpace });\n      nextIndex++;\n    }\n\n    return nextIndex;\n  });\n}\n\n/**\n * @param {RehypeNode} node\n * @returns {string|null}\n */\nfunction getNodeTextAlignment (node) {\n  const style = resolveNodeStyle(node);\n  const alignMatch = style['text-align']?.match(/^(left|center|right)/);\n  if (alignMatch) {\n    return alignMatch[1];\n  }\n  return null;\n}\n\n/**\n * Tables in Google Docs don't actually put alignment info on the columns or\n * cells. Instead, cells have paragraphs that are aligned. This detects the\n * alignment of the content of table cells so that the Markdown conversion will\n * set the correct alignment for columns.\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function detectTableColumnAlignment(node) {\n  visit(node, isCell, (node, _index, _parent) => {\n    if (!node.properties.align) {\n      let alignment = getNodeTextAlignment(node);\n      if (!alignment && node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          const childAlignment = getNodeTextAlignment(node.children[i]);\n          if (i === 0) {\n            alignment = childAlignment;\n          }\n          else if (childAlignment !== alignment) {\n            alignment = null;\n            break;\n          }\n        }\n      }\n\n      if (alignment) {\n        node.properties.align = alignment;\n      }\n    }\n  });\n}\n\n/**\n * @private\n * Determine whether all the text nodes that are descendents of this node are\n * wrapped inside nodes represent `<code>` elements. Returns `null` if the\n * node has no text descendents, otherwise returns a boolean.\n * @param {RehypeNode} parent Check children of this node.\n * @returns {boolean|null}\n */\nfunction isAllTextCode(parent) {\n  if (!parent.children?.length) return null;\n\n  let hasText = false;\n  for (const child of parent.children) {\n    if (child.tagName === 'code') {\n      hasText = true;\n      continue;\n    }\n    else if (child.type === 'text') {\n      return false;\n    }\n    else {\n      const childResult = isAllTextCode(child);\n      if (childResult === false) {\n        return false;\n      }\n      else if (childResult === true) {\n        hasText = true;\n      }\n    }\n  }\n\n  return hasText ? true : null;\n}\n\n/**\n * Identify paragraphs where all the text is wrapped in `<code>` nodes and wrap\n * the entire pagraph in a `<pre><code>` node. Merge consecutive all-code\n * paragraphs into a single `<pre><code>` block.\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function createCodeBlocks(node) {\n  if (!node.children?.length) return;\n\n  // TODO: identify *lines* that are all code (not just block elements) by\n  // splitting on `<br>` nodes, and break up parent blocks that have complete\n  // code lines in them.\n\n  const codeBlocks = [];\n  let activeCodeBlock = null;\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    if (isBlock(child)) {\n      if (isAllTextCode(child)) {\n        if (!activeCodeBlock) {\n          activeCodeBlock = { start: i, end: 0 };\n          codeBlocks.push(activeCodeBlock);\n        }\n      }\n      else {\n        if (activeCodeBlock) {\n          activeCodeBlock.end = i;\n          activeCodeBlock = null;\n        }\n      }\n    }\n    else {\n      createCodeBlocks(child);\n    }\n  }\n  if (activeCodeBlock) {\n    activeCodeBlock.end = node.children.length;\n  }\n\n  // Go in reverse order so we can use the indexes as is, without worrying about\n  // how replacing each block changes the indexes of the next one.\n  for (const block of codeBlocks.reverse()) {\n    const length = block.end - block.start;\n    const contents = node.children\n      .slice(block.start, block.end)\n      .flatMap(node =>\n        // Unwrap paragraphs and replace them with their contents + a line break\n        // so we don't wind up adding blank lines around each line of code.\n        node.tagName === 'p'\n          ? [...node.children, {type:'element', tagName: 'br'}]\n          : [node]\n      );\n    node.children.splice(block.start, length, {\n      type: 'element',\n      tagName: 'pre',\n      children: [{\n        type: 'element',\n        tagName: 'code',\n        children: contents\n      }]\n    });\n  }\n}\n\nconst isChecklistItem = (node) => node.tagName === 'li' && node.properties?.role === 'checkbox';\n\n/**\n * Insert actual `<input>` checkboxes at the start of items in checklists.\n *\n * Google Docs checklists use ARIA attributes to indicate that items are\n * checklist items, and in some browsers include an image (!) of a checkbox.\n * Neither of these cleanly translate to Markdown on their own.\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction fixChecklists (node) {\n  visit(node, isChecklistItem, (node, _index, _parent) => {\n    // As of 2023-08-16, Chrome Canary starts checklist items with an inline,\n    // b64-encoded image of an (un)checked checkbox. Remove it so we don't get\n    // images in our Markdown output.\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (child.type === 'element') {\n        if (\n          child.tagName === 'img' &&\n          child.properties?.ariaRoleDescription?.includes('checkbox')\n        ) {\n          node.children.splice(i, 1);\n        }\n        break;\n      }\n    }\n\n    const checked = node.properties.ariaChecked?.toLowerCase() === 'true';\n    // The checkbox must be in a <p> element.\n    // See: https://github.com/syntax-tree/hast-util-to-mdast/issues/80\n    node.children.splice(0, 0, {\n      type: 'element',\n      tagName: 'p',\n      children: [{\n        type: 'element',\n        tagName: 'input',\n        properties: { type: 'checkbox', checked }\n      }]\n    });\n  });\n}\n\nfunction getTextContent (node) {\n  if (node.type === 'text') {\n    return node.value;\n  }\n  else if (node.children) {\n    return node.children.map(getTextContent).join('');\n  }\n  else {\n    return '';\n  }\n}\n\n/**\n * Create IDs for headings, and update internal links to use those IDs.\n * @param {RehypeNode} node\n * @param {*} sliceClip\n */\nfunction fixInternalLinks (node, sliceClip) {\n  if (!sliceClip) return;\n\n  let internalHeadings;\n  try {\n    internalHeadings = sliceClip\n      .resolved\n      .dsl_styleslices\n      .find(styleslice => styleslice.stsl_type === 'paragraph')\n      .stsl_styles\n      .filter(style => style?.ps_hdid)\n      .map(heading => ({ level: heading.ps_hd, id: heading.ps_hdid }));\n  }\n  catch (error) {\n    console.error('Error extracting headings from GDocs slice clip:', error);\n  }\n\n  // Nothing to do if there were no headings!\n  if (!internalHeadings?.length) return;\n\n  const headings = [];\n  visit(node, n => n.tagName?.match(/^h\\d$/), (node, _index, _parent) => {\n    headings.push(node);\n  });\n\n  // check if the headings in the tree match the internal headings\n  if (!headings.every(\n    (heading, index) => heading.tagName.toLowerCase() === `h${internalHeadings?.[index]?.level}`)\n  ) {\n    console.warn(\n      'Headings in slice clip data do not match headings in document; '\n      + 'intra-document links will be broken.'\n    );\n    return;\n  }\n\n  // Replace heading IDs with new, readable IDs.\n  const slugger = new GithubSlugger();\n  const headingIdMap = new Map();\n  headings.forEach((heading, index) => {\n    const internalHeading = internalHeadings[index];\n    const newId = slugger.slug(getTextContent(heading));\n    heading.properties.id = newId;\n    headingIdMap.set(internalHeading.id, newId);\n  });\n\n  // Update any links to the headings.\n  visit(node, n => n.tagName === 'a', (node, _index, _parent) => {\n    let url;\n    try {\n      url = new URL(node.properties.href);\n    }\n    catch (_error) {\n      return;\n    }\n\n    if (url.host === 'docs.google.com') {\n      const internalHeadingId = url.hash.match(/^#heading=([a-z0-9.]+)$/)?.[1];\n      log('Updating link to %o', internalHeadingId)\n      const newId = headingIdMap.get(internalHeadingId);\n      if (newId) {\n        node.properties.href = `#${newId}`;\n      }\n    }\n  });\n}\n\n/**\n * A rehype plugin to clean up the HTML of a Google Doc. .This applies to the\n * live HTML of Doc, as when you copy and paste it; not *exported* HTML (it\n * might apply there, too; I haven’t looked into it).\n */\nexport default function fixGoogleHtml () {\n  return (tree, _file) => {\n    unInlineStyles(tree);\n    createCodeBlocks(tree);\n    moveSpaceOutsideSensitiveChildren(tree);\n    fixNestedLists(tree);\n    detectTableColumnAlignment(tree);\n    unwrapLineBreaks(tree);\n    moveLinebreaksOutsideOfAnchors(tree);\n    removeLineBreaksBeforeBlocks(tree);\n    fixChecklists(tree);\n    fixInternalLinks(tree, _file.data.sliceClip)\n    return tree;\n  };\n}\n","export var webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name.\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector.\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: fine.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any concrete `hast` node.\n * @typedef {Root | Element} HResult\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {string | number} HStyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, HStyleValue>} HStyle\n *   Supported value of a `style` prop.\n * @typedef {string | number | boolean | null | undefined} HPrimitiveValue\n *   Primitive property value.\n * @typedef {Array<string | number>} HArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {HPrimitiveValue | HArrayValue} HPropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: HPropertyValue | HStyle}} HProperties\n *   Acceptable value for element properties.\n *\n * @typedef {string | number | null | undefined} HPrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<Node | HPrimitiveChild>} HArrayChild\n *   List of children.\n * @typedef {Node | HPrimitiveChild | HArrayChild} HChild\n *   Acceptable child value.\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nconst buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null | undefined, ...children: Array<HChild>): Root\n     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element\n     *   (selector: string, ...children: Array<HChild>): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string | null} [selector]\n       * @param {HProperties | HChild} [properties]\n       * @param {Array<HChild>} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        let index = -1\n        /** @type {HResult} */\n        let node\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-expect-error Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            /** @type {string} */\n            let key\n\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-expect-error `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.type === 'element' && node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties | HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle | HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {HPropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<string | number>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // @ts-expect-error Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-expect-error Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<Content>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {HStyle} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n */\n\nimport {svg} from 'property-information'\nimport {core} from './core.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\nexport const s = core(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n */\n\nimport {html} from 'property-information'\nimport {core} from './core.js'\n\nexport const h = core(html, 'div')\n","/**\n * @typedef {import('hast').Parent} HastParent\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').DocType} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {HastParent['children'][number]} HastChild\n * @typedef {HastChild|HastRoot} HastNode\n */\n\nimport {webNamespaces} from 'web-namespaces'\nimport {h, s} from 'hastscript'\n\nconst ELEMENT_NODE = 1\nconst TEXT_NODE = 3\nconst COMMENT_NODE = 8\nconst DOCUMENT_NODE = 9\nconst DOCUMENT_TYPE_NODE = 10\nconst DOCUMENT_FRAGMENT_NODE = 11\n\n/**\n * @param {Node} node\n * @returns {HastNode|undefined}\n */\nfunction transform(node) {\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return element(node)\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return root(node)\n    case TEXT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return text(node)\n    case COMMENT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return comment(node)\n    case DOCUMENT_TYPE_NODE:\n      return doctype()\n    default:\n      return undefined\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document|DocumentFragment} node\n * @returns {HastRoot}\n */\nfunction root(node) {\n  return {type: 'root', children: all(node)}\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n */\nfunction doctype() {\n  // @ts-expect-error hast types out of date.\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n * @returns {HastText}\n */\nfunction text(node) {\n  return {type: 'text', value: node.nodeValue || ''}\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n * @returns {HastComment}\n */\nfunction comment(node) {\n  return {type: 'comment', value: node.nodeValue || ''}\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n * @returns {HastElement}\n */\nfunction element(node) {\n  const space = node.namespaceURI\n  const fn = space === webNamespaces.svg ? s : h\n  const tagName =\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\n  /** @type {DocumentFragment|Element} */\n  const content =\n    // @ts-expect-error Types are wrong.\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\n  const attributes = node.getAttributeNames()\n  /** @type {Object.<string, string>} */\n  const props = {}\n  let index = -1\n\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\n  }\n\n  return fn(tagName, props, all(content))\n}\n\n/**\n * Transform an element.\n *\n * @param {Document|DocumentFragment|Element} node\n * @returns {Array.<HastChild>}\n */\nfunction all(node) {\n  const nodes = node.childNodes\n  /** @type {Array.<HastChild>} */\n  const children = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const child = transform(nodes[index])\n\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Node} node\n * @returns {HastNode}\n */\nexport function fromDom(node) {\n  return transform(node || {}) || {type: 'root', children: []}\n}\n","/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean} [fragment=true]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n */\n\nimport {fromDom} from 'hast-util-from-dom'\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function parse(options) {\n  const settings = /** @type {Options} */ (this.data('settings'))\n  const {fragment} = {...options, ...settings}\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc) {\n    const create =\n      fragment === null || fragment === undefined || fragment\n        ? createFragment\n        : createDocument\n    return /** @type {Root} */ (fromDom(create(doc)))\n  }\n}\n\nconst DOCUMENT_FRAGMENT_NODE = 11\n\n/**\n * @param {string} htmlString\n * @returns {DocumentFragment}\n */\nfunction createFragment(htmlString) {\n  const doc = createDocument('<!doctype html><body>' + htmlString)\n\n  /**\n   * Pretend as a DocumentFragment node,\n   * @see https://github.com/rehypejs/rehype-dom/pull/19 for more details\n   */\n  return /** @type {DocumentFragment} */ ({\n    nodeType: DOCUMENT_FRAGMENT_NODE,\n    childNodes: doc.body.childNodes\n  })\n}\n\n/**\n * @param {string} htmlString\n * @returns {Document}\n */\nfunction createDocument(htmlString) {\n  return new DOMParser().parseFromString(htmlString, 'text/html')\n}\n","export const own = {}.hasOwnProperty\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string} value\n * @returns {string}\n */\nexport function wrapText(h, value) {\n  return h.wrapText ? value : value.replace(/\\r?\\n|\\r/g, ' ')\n}\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {all} from './all.js'\nimport {own} from './util/own.js'\nimport {wrapText} from './util/wrap-text.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @param {Parent|undefined} parent\n * @returns {MdastNode|Array.<MdastNode>|void}\n */\nexport function one(h, node, parent) {\n  /** @type {Handle|undefined} */\n  let fn\n\n  if (node.type === 'element') {\n    if (node.properties && node.properties.dataMdast === 'ignore') {\n      return\n    }\n\n    if (own.call(h.handlers, node.tagName)) {\n      fn = h.handlers[node.tagName]\n    }\n  } else if (own.call(h.handlers, node.type)) {\n    fn = h.handlers[node.type]\n  }\n\n  if (typeof fn === 'function') {\n    return fn(h, node, parent)\n  }\n\n  return unknown(h, node)\n}\n\n/**\n * @type {Handle}\n * @param {Node} node\n */\nfunction unknown(h, node) {\n  // @ts-expect-error: Looks like a literal.\n  if (typeof node.value === 'string') {\n    // @ts-expect-error: Looks like a literal.\n    return h(node, 'text', wrapText(h, node.value))\n  }\n\n  return all(h, node)\n}\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {one} from './one.js'\n\n/**\n * @param {H} h\n * @param {Node} parent\n * @returns {Array.<MdastNode>}\n */\nexport function all(h, parent) {\n  /** @type {Array.<Node>} */\n  // @ts-expect-error Assume `parent` is a parent.\n  const nodes = parent.children || []\n  /** @type {Array.<MdastNode>} */\n  const values = []\n  let index = -1\n  let length = nodes.length\n  let child = nodes[index + 1]\n\n  // Trim initial and final `<br>`s.\n  // They’re not semantic per HTML, and they can’t be made in markdown things\n  // like paragraphs or headings.\n  while (child && child.type === 'element' && child.tagName === 'br') {\n    index++\n    child = nodes[index + 1]\n  }\n\n  child = nodes[length - 1]\n\n  while (\n    length - 1 > index &&\n    child &&\n    child.type === 'element' &&\n    child.tagName === 'br'\n  ) {\n    length--\n    child = nodes[length - 1]\n  }\n\n  while (++index < length) {\n    // @ts-expect-error assume `parent` is a parent.\n    const result = one(h, nodes[index], parent)\n\n    if (Array.isArray(result)) {\n      values.push(...result)\n    } else if (result) {\n      values.push(result)\n    }\n  }\n\n  return values\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n *\n * @typedef {string} TagName\n * @typedef {null|undefined|TagName|TestFunctionAnything|Array.<TagName|TestFunctionAnything>} Test\n */\n\n/**\n * @template {Element} T\n * @typedef {null|undefined|T['tagName']|TestFunctionPredicate<T>|Array.<T['tagName']|TestFunctionPredicate<T>>} PredicateTest\n */\n\n/**\n * Check if an element passes a test\n *\n * @callback TestFunctionAnything\n * @param {Element} element\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if an element passes a certain node test\n *\n * @template {Element} X\n * @callback TestFunctionPredicate\n * @param {Element} element\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {element is X}\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\n// Check if `node` is an `element` and whether it passes the given test.\nexport const isElement =\n  /**\n   * Check if a node is an element and passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test] When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number} [index] Position of `node` in `parent`\n     * @param {Parent} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is an `Element` (object with `type` set to `element` and `tagName` set to a non-empty string).\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName']|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * @param {Array.<TagName|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s tag\n * name for said string.\n *\n * @param {TagName} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Utility to return true if this is an element.\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * @typedef {import('hast').Element & {tagName: 'audio'|'canvas'|'embed'|'iframe'|'img'|'math'|'object'|'picture'|'svg'|'video'}} Embedded\n * @typedef {import('hast-util-is-element').AssertPredicate<Embedded>} AssertEmbedded\n */\n\nimport {convertElement} from 'hast-util-is-element'\n\n/**\n * Check if a node is an embedded element.\n * @type {AssertEmbedded}\n */\n// @ts-ignore Sure, the assertion matches.\nexport const embedded = convertElement([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'math',\n  'object',\n  'picture',\n  'svg',\n  'video'\n])\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nexport const blocks = [\n  'address', // Flow content.\n  'article', // Sections and headings.\n  'aside', // Sections and headings.\n  'blockquote', // Flow content.\n  'body', // Page.\n  'br', // Contribute whitespace intrinsically.\n  'caption', // Similar to block.\n  'center', // Flow content, legacy.\n  'col', // Similar to block.\n  'colgroup', // Similar to block.\n  'dd', // Lists.\n  'dialog', // Flow content.\n  'dir', // Lists, legacy.\n  'div', // Flow content.\n  'dl', // Lists.\n  'dt', // Lists.\n  'figcaption', // Flow content.\n  'figure', // Flow content.\n  'footer', // Flow content.\n  'form', // Flow content.\n  'h1', // Sections and headings.\n  'h2', // Sections and headings.\n  'h3', // Sections and headings.\n  'h4', // Sections and headings.\n  'h5', // Sections and headings.\n  'h6', // Sections and headings.\n  'head', // Page.\n  'header', // Flow content.\n  'hgroup', // Sections and headings.\n  'hr', // Flow content.\n  'html', // Page.\n  'legend', // Flow content.\n  'li', // Block-like.\n  'li', // Similar to block.\n  'listing', // Flow content, legacy\n  'main', // Flow content.\n  'menu', // Lists.\n  'nav', // Sections and headings.\n  'ol', // Lists.\n  'optgroup', // Similar to block.\n  'option', // Similar to block.\n  'p', // Flow content.\n  'plaintext', // Flow content, legacy\n  'pre', // Flow content.\n  'section', // Sections and headings.\n  'summary', // Similar to block.\n  'table', // Similar to block.\n  'tbody', // Similar to block.\n  'td', // Block-like.\n  'td', // Similar to block.\n  'tfoot', // Similar to block.\n  'th', // Block-like.\n  'th', // Similar to block.\n  'thead', // Similar to block.\n  'tr', // Similar to block.\n  'ul', // Lists.\n  'wbr', // Contribute whitespace intrinsically.\n  'xmp' // Flow content, legacy\n]\n","export const content = [\n  // Form.\n  'button',\n  'input',\n  'select',\n  'textarea'\n]\n","export const skippable = [\n  'area',\n  'base',\n  'basefont',\n  'dialog',\n  'datalist',\n  'head',\n  'link',\n  'meta',\n  'noembed',\n  'noframes',\n  'param',\n  'rp',\n  'script',\n  'source',\n  'style',\n  'template',\n  'track',\n  'title'\n]\n","/**\n * rehype plugin to minify whitespace between elements.\n *\n * ## What is this?\n *\n * This package is a plugin that can minify the whitespace between elements.\n *\n * ## When should I use this?\n *\n * You can use this plugin when you want to improve the size of HTML documents.\n *\n * ## API\n *\n * ### `unified().use(rehypeMinifyWhitespace[, options])`\n *\n * Minify whitespace.\n *\n * ##### `options`\n *\n * Configuration (optional).\n *\n * ##### `options.newlines`\n *\n * Whether to collapse runs of whitespace that include line endings to one\n * line ending (`boolean`, default: `false`).\n * The default is to collapse everything to one space.\n *\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {Root|Root['children'][number]} Node\n *\n * @typedef Options\n * @property {boolean} [newlines=false]\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\n *   instead of `' '`.\n *   The default is to collapse to a single space.\n *\n * @typedef {'pre'|'nowrap'|'pre-wrap'|'normal'} Whitespace\n *\n * @typedef Context\n * @property {ReturnType<collapseFactory>} collapse\n * @property {Whitespace} whitespace\n * @property {boolean} [before]\n * @property {boolean} [after]\n *\n * @typedef Result\n * @property {boolean} remove\n * @property {boolean} ignore\n * @property {boolean} stripAtStart\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {embedded} from 'hast-util-embedded'\nimport {convert} from 'unist-util-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {blocks} from './block.js'\nimport {content as contents} from './content.js'\nimport {skippable as skippables} from './skippable.js'\n\nconst ignorableNode = convert(['doctype', 'comment'])\n\n/**\n * Minify whitespace.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeMinifyWhitespace(options = {}) {\n  const collapse = collapseFactory(\n    options.newlines ? replaceNewlines : replaceWhitespace\n  )\n\n  return (tree) => {\n    minify(tree, {collapse, whitespace: 'normal'})\n  }\n}\n\n/**\n * @param {Node} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minify(node, context) {\n  if ('children' in node) {\n    const settings = Object.assign({}, context)\n\n    if (node.type === 'root' || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, context)\n\n    return all(node, settings)\n  }\n\n  if (node.type === 'text') {\n    if (context.whitespace === 'normal') {\n      return minifyText(node, context)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (context.whitespace === 'nowrap') {\n      node.value = context.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {remove: false, ignore: ignorableNode(node), stripAtStart: false}\n}\n\n/**\n * @param {Text} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minifyText(node, context) {\n  const value = context.collapse(node.value)\n  const result = {remove: false, ignore: false, stripAtStart: false}\n  let start = 0\n  let end = value.length\n\n  if (context.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (context.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\n/**\n * @param {Root|Element} parent\n * @param {Context} context\n * @returns {Result}\n */\nfunction all(parent, context) {\n  let before = context.before\n  const after = context.after\n  const children = parent.children\n  let length = children.length\n  let index = -1\n\n  while (++index < length) {\n    const result = minify(\n      children[index],\n      Object.assign({}, context, {\n        before,\n        after: collapsableAfter(children, index, after)\n      })\n    )\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}\n}\n\n/**\n * @param {Array<Node>} nodes\n * @param {number} index\n * @param {boolean|undefined} [after]\n * @returns {boolean|undefined}\n */\nfunction collapsableAfter(nodes, index, after) {\n  while (++index < nodes.length) {\n    const node = nodes[index]\n    let result = inferBoundary(node)\n\n    if (result === undefined && 'children' in node && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n/**\n * Infer two types of boundaries:\n *\n * 1. `true` — boundary for which whitespace around it does not contribute\n *    anything\n * 2. `false` — boundary for which whitespace around it *does* contribute\n *\n * No result (`undefined`) is returned if it is unknown.\n *\n * @param {Node} node\n * @returns {boolean|undefined}\n */\nfunction inferBoundary(node) {\n  if (node.type === 'element') {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (node.type === 'text') {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n/**\n * Infer whether a node is skippable.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nfunction content(node) {\n  return embedded(node) || isElement(node, contents)\n}\n\n/**\n * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\n *\n * @param {Element} node\n * @returns {boolean}\n */\nfunction blocklike(node) {\n  return isElement(node, blocks)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {boolean}\n */\nfunction skippable(node) {\n  return (\n    Boolean(\n      'properties' in node && node.properties && node.properties.hidden\n    ) ||\n    ignorableNode(node) ||\n    isElement(node, skippables)\n  )\n}\n\n/**\n * @param {string} character\n * @returns {boolean}\n */\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction replaceNewlines(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * @returns {string}\n */\nfunction replaceWhitespace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction collapseFactory(replace) {\n  return collapse\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\n  }\n}\n\n/**\n * We don’t need to support void elements here (so `nobr wbr` -> `normal` is\n * ignored).\n *\n * @param {Root|Element} node\n * @param {Context} context\n * @returns {Whitespace}\n */\nfunction inferWhiteSpace(node, context) {\n  if ('tagName' in node && node.properties) {\n    switch (node.tagName) {\n      // Whitespace in script/style, while not displayed by CSS as significant,\n      // could have some meaning in JS/CSS, so we can’t touch them.\n      case 'listing':\n      case 'plaintext':\n      case 'script':\n      case 'style':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return node.properties.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return node.properties.noWrap ? 'nowrap' : context.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return context.whitespace\n}\n","/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  var value =\n    // @ts-ignore looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-ignore looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * @type {AssertPredicatePhrasing}\n */\n// @ts-ignore hush, it’s fine!\nexport const phrasing = convert([\n  'break',\n  'delete',\n  'emphasis',\n  'footnote',\n  'footnoteReference',\n  'image',\n  'imageReference',\n  'inlineCode',\n  'link',\n  'linkReference',\n  'strong',\n  'text'\n])\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n */\n\nimport extend from 'extend'\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Array.<MdastNode>} nodes\n */\nexport function wrap(nodes) {\n  return runs(nodes, onphrasing)\n\n  /**\n   * @param {Array.<MdastPhrasingContent>} nodes\n   * @returns {MdastNode|Array.<MdastNode>}\n   */\n  function onphrasing(nodes) {\n    const head = nodes[0]\n\n    if (\n      nodes.length === 1 &&\n      head.type === 'text' &&\n      (head.value === ' ' || head.value === '\\n')\n    ) {\n      return []\n    }\n\n    return {type: 'paragraph', children: nodes}\n  }\n}\n\n/**\n * Check if there are non-phrasing mdast nodes returned.\n * This is needed if a fragment is given, which could just be a sentence, and\n * doesn’t need a wrapper paragraph.\n *\n * @param {Array.<MdastNode>} nodes\n * @returns {boolean}\n */\nexport function wrapNeeded(nodes) {\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wrap all runs of mdast phrasing content in `paragraph` nodes.\n *\n * @param {Array.<MdastNode>} nodes\n * @param {(nodes: Array.<MdastPhrasingContent>) => MdastNode|Array.<MdastNode>} onphrasing\n * @param {(node: MdastNode) => MdastNode} [onnonphrasing]\n */\nfunction runs(nodes, onphrasing, onnonphrasing) {\n  const nonphrasing = onnonphrasing || identity\n  /** @type {Array.<MdastNode>} */\n  const flattened = flatten(nodes)\n  /** @type {Array.<MdastNode>} */\n  let result = []\n  let index = -1\n  /** @type {Array.<MdastPhrasingContent>|undefined} */\n  let queue\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < flattened.length) {\n    node = flattened[index]\n\n    if (phrasing(node)) {\n      if (!queue) queue = []\n      queue.push(node)\n    } else {\n      if (queue) {\n        result = result.concat(onphrasing(queue))\n        queue = undefined\n      }\n\n      result = result.concat(nonphrasing(node))\n    }\n  }\n\n  if (queue) {\n    result = result.concat(onphrasing(queue))\n  }\n\n  return result\n}\n\n/**\n * Flatten a list of nodes.\n *\n * @param {Array.<MdastNode>} nodes\n * @returns {Array.<MdastNode>}\n */\nfunction flatten(nodes) {\n  /** @type {Array.<MdastNode>} */\n  let flattened = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    // Straddling: some elements are *weird*.\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\n    // Paragraphs are the weirdest of them all.\n    // See the straddling fixture for more info!\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\n    // `map` maps to its content, so we don’t need to worry about that either.\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\n    // What we’ll do is split `node` over each of its children.\n    if (\n      (node.type === 'delete' || node.type === 'link') &&\n      wrapNeeded(node.children)\n    ) {\n      flattened = flattened.concat(split(node))\n    } else {\n      flattened.push(node)\n    }\n  }\n\n  return flattened\n}\n\n/**\n * @param {MdastNode} node\n * @returns {Array.<MdastNode>}\n */\nfunction split(node) {\n  // @ts-expect-error Assume parent.\n  return runs(node.children, onphrasing, onnonphrasing)\n\n  /**\n   * Use `child`, add `parent` as its first child, put the original children\n   * into `parent`.\n   * If `child` is not a parent, `parent` will not be added.\n   *\n   * @param {MdastNode} child\n   * @returns {MdastNode}\n   */\n  function onnonphrasing(child) {\n    if ('children' in child && 'children' in node) {\n      const {children, ...rest} = node\n      return {\n        ...child,\n        // @ts-expect-error: assume matching parent & child.\n        children: [{...extend(true, {}, rest), children: child.children}]\n      }\n    }\n\n    return {...child}\n  }\n\n  /**\n   * Use `parent`, put the phrasing run inside it.\n   *\n   * @param {Array.<MdastPhrasingContent>} nodes\n   * @returns {MdastNode}\n   */\n  function onphrasing(nodes) {\n    // @ts-expect-error: assume parent.\n    const {children, ...rest} = node\n    // @ts-expect-error: assume matching parent & child.\n    return {...extend(true, {}, rest), children: nodes}\n  }\n}\n\n/**\n * @template {unknown} T\n * @param {T} n\n * @returns {T}\n */\nfunction identity(n) {\n  return n\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @returns {Array.<MdastNode>}\n */\nexport function wrapChildren(h, node) {\n  return wrap(all(h, node))\n}\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string|null|undefined} url\n * @returns {string}\n */\nexport function resolve(h, url) {\n  if (url === null || url === undefined) {\n    return ''\n  }\n\n  if (h.frozenBaseUrl) {\n    return String(new URL(url, h.frozenBaseUrl))\n  }\n\n  return url\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {import('unist-util-is').Type} Type\n * @typedef {import('unist-util-is').Props} Props\n * @typedef {import('unist-util-is').TestFunctionAnything} TestFunctionAnything\n */\n\nimport {convert} from 'unist-util-is'\n\nexport var findAfter =\n  /**\n   * @type {(\n   *  (<T extends Node>(node: Parent, index: Node|number, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>) => T|null) &\n   *  ((node: Parent, index: Node|number, test?: null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>) => Node|null)\n   * )}\n   */\n  (\n    /**\n     * @param {Parent} parent Parent node\n     * @param {Node|number} index Child of `parent`, or it’s index\n     * @param {null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>} [test] is-compatible test (such as a type)\n     * @returns {Node|null}\n     */\n    function (parent, index, test) {\n      var is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return null\n    }\n  )\n","/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Parent['children'][number]} HastChild\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {HastChild|HastRoot} HastNode\n * @typedef {HastRoot|HastElement} HastParent\n *\n * @typedef {'normal'|'pre'|'nowrap'|'pre-wrap'} Whitespace\n * @typedef {boolean} BreakValue\n * @typedef {1|2} BreakNumber\n * @typedef {'\\n'} BreakForce\n * @typedef {BreakValue|BreakNumber|undefined} BreakBefore\n * @typedef {BreakValue|BreakNumber|BreakForce|undefined} BreakAfter\n *\n * @typedef CollectionOptions\n * @property {Whitespace} whitespace\n * @property {BreakBefore} breakBefore\n * @property {BreakAfter} breakAfter\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findAfter} from 'unist-util-find-after'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst p = convertElement('p')\nconst cell = convertElement(['th', 'td'])\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Implementation of the `innerText` getter:\n * <https://html.spec.whatwg.org/#the-innertext-idl-attribute>\n * Note that we act as if `node` is being rendered, and as if we’re a\n * CSS-supporting user agent.\n *\n * @param {HastNode} node\n * @param {Options} [options={}]\n * @returns {string}\n */\nexport function toText(node, options = {}) {\n  /** @type {Array.<HastChild>} */\n  // @ts-ignore looks like a parent.\n  const children = node.children || []\n  const block = blockOrCaption(node)\n  const whitespace = inferWhitespace(node, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n  let index = -1\n  /** @type {Array.<string|BreakNumber>} */\n  let results\n  /** @type {string|BreakNumber} */\n  let value\n  /** @type {number|undefined} */\n  let count\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (node.type === 'text' || node.type === 'comment') {\n    return collectText(node, {whitespace, breakBefore: true, breakAfter: true})\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  results = []\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results = results.concat(\n      // @ts-ignore Looks like a parent.\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? null : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  index = -1\n  /** @type {Array.<string>} */\n  const result = []\n\n  while (++index < results.length) {\n    value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count) result.push('\\n'.repeat(count))\n      count = 0\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {HastNode} node\n * @param {HastParent} parent\n * @param {CollectionOptions} options\n * @returns {Array.<string|BreakNumber>}\n */\nfunction innerTextCollection(node, parent, options) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, options)\n  }\n\n  if (node.type === 'text') {\n    return [\n      options.whitespace === 'normal'\n        ? collectText(node, options)\n        : collectPreText(node)\n    ]\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {HastElement} node\n * @param {HastParent} parent\n * @param {CollectionOptions} options\n */\nfunction collectElement(node, parent, options) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, options)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array.<string|BreakNumber>} */\n  let items = []\n  /** @type {BreakNumber|undefined} */\n  let prefix\n  /** @type {BreakNumber|BreakForce|undefined} */\n  let suffix\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {HastText|HastComment} node\n * @param {CollectionOptions} options\n * @returns {string}\n */\nfunction collectText(node, options) {\n  const value = String(node.value)\n  /** @type {Array.<string>} */\n  const lines = []\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  let index = -1\n  /** @type {RegExpMatchArray|null} */\n  let match\n  /** @type {number} */\n  let end\n  /** @type {string|undefined} */\n  let join\n\n  while (start < value.length) {\n    searchLineFeeds.lastIndex = start\n    match = searchLineFeeds.exec(value)\n    // @ts-expect-error: `index` is set.\n    end = match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // [...] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        options.breakBefore,\n        options.breakAfter\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = ''\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (join) result.push(join)\n      result.push(lines[index])\n      join = ' '\n    }\n  }\n\n  return result.join('')\n}\n\n/**\n * @param {HastText|HastComment} node\n * @returns {string}\n */\nfunction collectPreText(node) {\n  return String(node.value)\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n * @param {BreakBefore} breakBefore\n * @param {BreakAfter} breakAfter\n * @returns {string}\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  /** @type {RegExpMatchArray|null} */\n  let match\n  /** @type {number} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    match = searchTabOrSpaces.exec(value)\n    // @ts-expect-error: `index` is set.\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  // @ts-expect-error: `end` is defined.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {HastNode} node\n * @param {CollectionOptions} options\n * @returns {Whitespace}\n */\nfunction inferWhitespace(node, options) {\n  /** @type {HastProperties} */\n  let props\n\n  if (node.type === 'element') {\n    props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return props.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return props.noWrap ? 'nowrap' : options.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return options.whitespace\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {trimTrailingLines} from 'trim-trailing-lines'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst prefix = 'language-'\n\nconst pre = convertElement('pre')\nconst isCode = convertElement('code')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function code(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<string|number>|undefined} */\n  let classList\n  /** @type {string|undefined} */\n  let lang\n\n  if (pre(node)) {\n    while (++index < children.length) {\n      const child = children[index]\n\n      if (\n        isCode(child) &&\n        child.properties &&\n        child.properties.className &&\n        Array.isArray(child.properties.className)\n      ) {\n        classList = child.properties.className\n        break\n      }\n    }\n  }\n\n  if (classList) {\n    index = -1\n\n    while (++index < classList.length) {\n      if (String(classList[index]).slice(0, prefix.length) === prefix) {\n        lang = String(classList[index]).slice(prefix.length)\n        break\n      }\n    }\n  }\n\n  return h(\n    node,\n    'code',\n    {lang: lang || null, meta: null},\n    trimTrailingLines(wrapText(h, toText(node)))\n  )\n}\n","/**\n * Remove final newline characters from `value`.\n *\n * @param {unknown} value Value with trailing line feeds, coerced to string.\n * @return {string} Value without trailing newlines.\n */\nexport function trimTrailingLines(value) {\n  return String(value).replace(/\\n+$/, '')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function del(h, node) {\n  return h(node, 'delete', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\n/**\n * @param {Array.<MdastListContent>} children\n * @returns {boolean}\n */\nexport function listItemsSpread(children) {\n  let index = -1\n\n  if (children.length > 1) {\n    while (++index < children.length) {\n      if (children[index].spread) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\nimport {all} from '../all.js'\n\n/**\n * @param {H} h\n * @param {Child} node\n * @returns {Array.<MdastListContent>}\n */\nexport function wrapListItems(h, node) {\n  const children = all(h, node)\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (child.type !== 'listItem') {\n      children[index] = {\n        type: 'listItem',\n        spread: false,\n        checked: null,\n        // @ts-expect-error Assume `children[index]` is block content.\n        children: [child]\n      }\n    }\n  }\n\n  // @ts-expect-error Assume all `listItem`s\n  return children\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent\n * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent\n *\n * @typedef Group\n * @property {Array.<Element>} titles\n * @property {Array.<ElementChild>} definitions\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst div = convertElement('div')\nconst dt = convertElement('dt')\nconst dd = convertElement('dd')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function dl(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<ElementChild>} */\n  let clean = []\n  /** @type {Array.<Group>} */\n  const groups = []\n  /** @type {Group} */\n  let group = {titles: [], definitions: []}\n  /** @type {ElementChild} */\n  let child\n  /** @type {Array.<MdastBlockContent|MdastDefinitionContent>} */\n  let result\n\n  // Unwrap `<div>`s\n  while (++index < children.length) {\n    child = children[index]\n    clean = clean.concat(div(child) ? child.children : child)\n  }\n\n  index = -1\n\n  // Group titles and definitions.\n  while (++index < clean.length) {\n    child = clean[index]\n\n    if (dt(child)) {\n      if (dd(clean[index - 1])) {\n        groups.push(group)\n        group = {titles: [], definitions: []}\n      }\n\n      group.titles.push(child)\n    } else {\n      group.definitions.push(child)\n    }\n  }\n\n  groups.push(group)\n\n  // Create items.\n  index = -1\n  /** @type {Array.<MdastListContent>} */\n  const content = []\n\n  while (++index < groups.length) {\n    result = [\n      ...handle(h, groups[index].titles),\n      ...handle(h, groups[index].definitions)\n    ]\n\n    if (result.length > 0) {\n      content.push({\n        type: 'listItem',\n        spread: result.length > 1,\n        checked: null,\n        children: result\n      })\n    }\n  }\n\n  // Create a list if there are items.\n  if (content.length > 0) {\n    return h(\n      node,\n      'list',\n      {ordered: false, start: null, spread: listItemsSpread(content)},\n      content\n    )\n  }\n}\n\n/**\n * @param {H} h\n * @param {Array.<ElementChild>} children\n * @returns {Array.<MdastBlockContent|MdastDefinitionContent>}\n */\nfunction handle(h, children) {\n  const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children})\n\n  if (nodes.length === 0) {\n    return []\n  }\n\n  if (nodes.length === 1) {\n    return nodes[0].children\n  }\n\n  return [\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: listItemsSpread(nodes),\n      children: nodes\n    }\n  ]\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function em(h, node) {\n  return h(node, 'emphasis', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function heading(h, node) {\n  // `else` shouldn’t happen, of course…\n  /* c8 ignore next */\n  const depth = Number(node.tagName.charAt(1)) || 1\n  const wrap = h.wrapText\n\n  h.wrapText = false\n  const result = h(node, 'heading', {depth}, all(h, node))\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function img(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(node, 'image', {\n    url: resolve(h, String(props.src || '') || null),\n    title: props.title || null,\n    alt: props.alt || ''\n  })\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'inlineCode', wrapText(h, toText(node)))\n}\n","var own = {}.hasOwnProperty\n\n/**\n * Check if `node` has a set `name` property.\n *\n * @param {unknown} node\n * @param {string} name\n * @returns {boolean}\n */\nexport function hasProperty(node, name) {\n  /** @type {unknown} */\n  var value =\n    name &&\n    node &&\n    typeof node === 'object' &&\n    // @ts-ignore Looks like a node.\n    node.type === 'element' &&\n    // @ts-ignore Looks like an element.\n    node.properties &&\n    // @ts-ignore Looks like an element.\n    own.call(node.properties, name) &&\n    // @ts-ignore Looks like an element.\n    node.properties[name]\n\n  return value !== null && value !== undefined && value !== false\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {hasProperty} from 'hast-util-has-property'\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from './wrap-text.js'\n\nconst option = convertElement('option')\n\n/**\n * @param {H} h\n * @param {Element} node\n * @param {Properties} [properties]\n * @returns {Array.<[string, string|null]>}\n */\nexport function findSelectedOptions(h, node, properties) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` exist.\n  const props = properties || node.properties\n  let options = findOptions(node)\n  const size =\n    Math.min(Number.parseInt(String(props.size), 10), 0) ||\n    (props.multiple ? 4 : 1)\n  let index = -1\n  /** @type {Array.<Element>} */\n  const selectedOptions = []\n  /** @type {Array.<[string, string|null]>} */\n  const values = []\n\n  while (++index < options.length) {\n    if (hasProperty(options[index], 'selected')) {\n      selectedOptions.push(options[index])\n    }\n  }\n\n  const list = selectedOptions.length > 0 ? selectedOptions : options\n  options = list.slice(0, size)\n  index = -1\n\n  while (++index < options.length) {\n    const option = options[index]\n    const content = wrapText(h, toText(option))\n    /** @type {Properties} */\n    // @ts-expect-error: `props` exist.\n    const props = option.properties\n    const label = content || String(props.label || '')\n    const value = String(props.value || '') || content\n    values.push([value, label === value ? null : label])\n  }\n\n  return values\n}\n\n/**\n * @param {Parent} node\n */\nfunction findOptions(node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<Element>} */\n  let results = []\n  /** @type {Child} */\n  let child\n\n  while (++index < children.length) {\n    child = children[index]\n\n    // @ts-expect-error Looks like a parent.\n    if (Array.isArray(child.children)) {\n      // @ts-expect-error Looks like a parent.\n      results = results.concat(findOptions(child))\n    }\n\n    if (option(child) && !hasProperty(child, 'disabled')) {\n      results.push(child)\n    }\n  }\n\n  return results\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {own} from '../util/own.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst datalist = convertElement('datalist')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function input(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  let value = String(props.value || props.placeholder || '')\n  /** @type {Array.<MdastNode>} */\n  const results = []\n  /** @type {Array.<string>} */\n  const texts = []\n  /** @type {Array.<[string, string|null]>} */\n  let values = []\n  let index = -1\n  /** @type {string} */\n  let list\n\n  if (props.disabled || props.type === 'hidden' || props.type === 'file') {\n    return\n  }\n\n  if (props.type === 'checkbox' || props.type === 'radio') {\n    return h(\n      node,\n      'text',\n      wrapText(h, h[props.checked ? 'checked' : 'unchecked'])\n    )\n  }\n\n  if (props.type === 'image') {\n    return props.alt || value\n      ? h(node, 'image', {\n          url: resolve(h, String(props.src || '') || null),\n          title: wrapText(h, String(props.title || '')) || null,\n          alt: wrapText(h, String(props.alt || value))\n        })\n      : []\n  }\n\n  if (value) {\n    values = [[value, null]]\n  } else if (\n    // `list` is not supported on these types:\n    props.type !== 'password' &&\n    props.type !== 'file' &&\n    props.type !== 'submit' &&\n    props.type !== 'reset' &&\n    props.type !== 'button' &&\n    props.list\n  ) {\n    list = String(props.list).toUpperCase()\n\n    if (own.call(h.nodeById, list) && datalist(h.nodeById[list])) {\n      values = findSelectedOptions(h, h.nodeById[list], props)\n    }\n  }\n\n  if (values.length === 0) {\n    return\n  }\n\n  // Hide password value.\n  if (props.type === 'password') {\n    // Passwords don’t support `list`.\n    values[0] = ['•'.repeat(values[0][0].length), null]\n  }\n\n  if (props.type === 'url' || props.type === 'email') {\n    while (++index < values.length) {\n      value = resolve(h, values[index][0])\n\n      results.push(\n        h(\n          node,\n          'link',\n          {\n            title: null,\n            url: wrapText(h, props.type === 'email' ? 'mailto:' + value : value)\n          },\n          [{type: 'text', value: wrapText(h, values[index][1] || value)}]\n        )\n      )\n\n      if (index !== values.length - 1) {\n        results.push({type: 'text', value: ', '})\n      }\n    }\n\n    return results\n  }\n\n  while (++index < values.length) {\n    texts.push(\n      values[index][1]\n        ? values[index][1] + ' (' + values[index][0] + ')'\n        : values[index][0]\n    )\n  }\n\n  return h(node, 'text', wrapText(h, texts.join(', ')))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {wrapChildren} from '../util/wrap-children.js'\n\nconst p = convertElement('p')\nconst input = convertElement('input')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function li(h, node) {\n  const head = node.children[0]\n  /** @type {boolean|null} */\n  let checked = null\n  /** @type {ElementChild} */\n  let checkbox\n  /** @type {Element|undefined} */\n  let clone\n\n  // Check if this node starts with a checkbox.\n  if (p(head)) {\n    checkbox = head.children[0]\n\n    if (\n      input(checkbox) &&\n      checkbox.properties &&\n      (checkbox.properties.type === 'checkbox' ||\n        checkbox.properties.type === 'radio')\n    ) {\n      checked = Boolean(checkbox.properties.checked)\n      clone = {\n        ...node,\n        children: [\n          {...head, children: head.children.slice(1)},\n          ...node.children.slice(1)\n        ]\n      }\n    }\n  }\n\n  const content = wrapChildren(h, clone || node)\n\n  return h(node, 'listItem', {spread: content.length > 1, checked}, content)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst ol = convertElement('ol')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function list(h, node) {\n  const ordered = ol(node)\n  const children = wrapListItems(h, node)\n  /** @type {number|null} */\n  let start = null\n\n  if (ordered) {\n    start = hasProperty(node, 'start')\n      ? // @ts-expect-error: `props` exist.\n        Number.parseInt(String(node.properties.start), 10)\n      : 1\n  }\n\n  return h(\n    node,\n    'list',\n    {ordered, start, spread: listItemsSpread(children)},\n    children\n  )\n}\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toString} from 'mdast-util-to-string'\nimport {visit, EXIT} from 'unist-util-visit'\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapNeeded} from '../util/wrap.js'\n\nconst source = convertElement('source')\nconst video = convertElement('video')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function media(h, node) {\n  let nodes = all(h, node)\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const properties = node.properties\n  const poster = video(node) && String(properties.poster || '')\n  let src = String(properties.src || '')\n  let index = -1\n  /** @type {boolean} */\n  let linkInFallbackContent = false\n  /** @type {ElementChild} */\n  let child\n\n  visit({type: 'root', children: nodes}, 'link', findLink)\n\n  // If the content links to something, or if it’s not phrasing…\n  if (linkInFallbackContent || wrapNeeded(nodes)) {\n    return nodes\n  }\n\n  // Find the source.\n  while (!src && ++index < node.children.length) {\n    child = node.children[index]\n    if (source(child)) {\n      // @ts-expect-error: `props` are defined.\n      src = String(child.properties.src || '')\n    }\n  }\n\n  // If there’s a poster defined on the video, create an image.\n  if (poster) {\n    nodes = [\n      {\n        type: 'image',\n        title: null,\n        url: resolve(h, poster),\n        alt: toString({children: nodes})\n      }\n    ]\n  }\n\n  // Link to the media resource.\n  return {\n    type: 'link',\n    // @ts-expect-error Types are broken.\n    title: node.properties.title || null,\n    url: resolve(h, src),\n    // @ts-expect-error Assume phrasing content.\n    children: nodes\n  }\n\n  function findLink() {\n    linkInFallbackContent = true\n    return EXIT\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function p(h, node) {\n  const nodes = all(h, node)\n\n  if (nodes.length > 0) {\n    return h(node, 'paragraph', nodes)\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableCell(h, node) {\n  const wrap = h.wrapText\n\n  h.wrapText = false\n\n  const result = h(node, 'tableCell', all(h, node))\n\n  if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {\n    const data = result.data || (result.data = {})\n    if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan\n    if (node.properties.colSpan) data.colSpan = node.properties.colSpan\n  }\n\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastTableContent} MdastTableContent\n * @typedef {import('../types.js').MdastRowContent} MdastRowContent\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n *\n * @typedef Info\n * @property {Array.<string|null>} align\n * @property {boolean} headless\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {visit, SKIP} from 'unist-util-visit'\nimport {wrapText} from '../util/wrap-text.js'\nimport {all} from '../all.js'\n\nconst thead = convertElement('thead')\nconst tr = convertElement('tr')\nconst cell = convertElement(['th', 'td'])\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function table(h, node) {\n  if (h.inTable) {\n    return h(node, 'text', wrapText(h, toText(node)))\n  }\n\n  h.inTable = true\n\n  const {headless, align} = inspect(node)\n  const rows = toRows(all(h, node), headless)\n  let columns = 1\n  let rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = -1\n\n    while (++cellIndex < cells.length) {\n      const cell = cells[cellIndex]\n\n      if (cell.data) {\n        const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1\n        const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1\n\n        if (colSpan > 1 || rowSpan > 1) {\n          let otherRowIndex = rowIndex - 1\n\n          while (++otherRowIndex < rowIndex + rowSpan) {\n            let colIndex = cellIndex - 1\n\n            while (++colIndex < cellIndex + colSpan) {\n              if (!rows[otherRowIndex]) {\n                // Don’t add rows that don’t exist.\n                // Browsers don’t render them either.\n                break\n              }\n\n              /** @type {Array.<MdastRowContent>} */\n              const newCells = []\n\n              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {\n                newCells.push({type: 'tableCell', children: []})\n              }\n\n              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells)\n            }\n          }\n        }\n\n        // Clean the data fields.\n        if ('colSpan' in cell.data) delete cell.data.colSpan\n        if ('rowSpan' in cell.data) delete cell.data.rowSpan\n        if (Object.keys(cell.data).length === 0) delete cell.data\n      }\n    }\n\n    if (cells.length > columns) columns = cells.length\n  }\n\n  // Add extra empty cells.\n  rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = cells.length - 1\n    while (++cellIndex < columns) {\n      cells.push({type: 'tableCell', children: []})\n    }\n  }\n\n  let alignIndex = align.length - 1\n  while (++alignIndex < columns) {\n    align.push(null)\n  }\n\n  h.inTable = false\n\n  return h(node, 'table', {align}, rows)\n}\n\n/**\n * Infer whether the HTML table has a head and how it aligns.\n *\n * @param {Element} node\n * @returns {Info}\n */\nfunction inspect(node) {\n  let headless = true\n  let rowIndex = 0\n  let cellIndex = 0\n  /** @type {Array.<string|null>} */\n  const align = [null]\n\n  visit(node, 'element', (child) => {\n    if (child.tagName === 'table' && node !== child) {\n      return SKIP\n    }\n\n    // If there is a `thead`, assume there is a header row.\n    if (cell(child) && child.properties) {\n      if (!align[cellIndex]) {\n        align[cellIndex] = String(child.properties.align || '') || null\n      }\n\n      // If there is a th in the first row, assume there is a header row.\n      if (headless && rowIndex < 2 && child.tagName === 'th') {\n        headless = false\n      }\n\n      cellIndex++\n    } else if (thead(child)) {\n      headless = false\n    } else if (tr(child)) {\n      rowIndex++\n      cellIndex = 0\n    }\n  })\n\n  return {align, headless}\n}\n\n/**\n * Ensure the rows are properly structured.\n *\n * @param {Array.<MdastNode>} children\n * @param {boolean} headless\n * @returns {Array.<MdastTableContent>}\n */\nfunction toRows(children, headless) {\n  let index = -1\n  /** @type {Array.<MdastTableContent>} */\n  const nodes = []\n  /** @type {Array.<MdastRowContent>|undefined} */\n  let queue\n\n  // Add an empty header row.\n  if (headless) {\n    nodes.push({type: 'tableRow', children: []})\n  }\n\n  while (++index < children.length) {\n    const node = children[index]\n\n    if (node.type === 'tableRow') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume row content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    nodes[nodes.length - 1].children.push(...queue)\n  }\n\n  index = -1\n\n  while (++index < nodes.length) {\n    nodes[index].children = toCells(nodes[index].children)\n  }\n\n  return nodes\n}\n\n/**\n * Ensure the cells in a row are properly structured.\n *\n * @param {Array.<MdastNode>} children\n * @returns {Array.<MdastRowContent>}\n */\nfunction toCells(children) {\n  /** @type {Array.<MdastRowContent>} */\n  const nodes = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n  /** @type {Array.<MdastPhrasingContent>|undefined} */\n  let queue\n\n  while (++index < children.length) {\n    node = children[index]\n\n    if (node.type === 'tableCell') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume phrasing content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    node = nodes[nodes.length - 1]\n\n    if (!node) {\n      node = {type: 'tableCell', children: []}\n      nodes.push(node)\n    }\n\n    node.children.push(...queue)\n  }\n\n  return nodes\n}\n","import {all} from '../all.js'\nimport {wrapChildren} from '../util/wrap-children.js'\nimport {a} from './a.js'\nimport {base} from './base.js'\nimport {blockquote} from './blockquote.js'\nimport {br} from './br.js'\nimport {code} from './code.js'\nimport {comment} from './comment.js'\nimport {del} from './del.js'\nimport {dl} from './dl.js'\nimport {em} from './em.js'\nimport {heading} from './heading.js'\nimport {hr} from './hr.js'\nimport {iframe} from './iframe.js'\nimport {img} from './img.js'\nimport {inlineCode} from './inline-code.js'\nimport {input} from './input.js'\nimport {li} from './li.js'\nimport {list} from './list.js'\nimport {media} from './media.js'\nimport {p} from './p.js'\nimport {q} from './q.js'\nimport {root} from './root.js'\nimport {select} from './select.js'\nimport {strong} from './strong.js'\nimport {tableCell} from './table-cell.js'\nimport {tableRow} from './table-row.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {textarea} from './textarea.js'\nimport {wbr} from './wbr.js'\n\nexport const handlers = {\n  root,\n  text,\n  comment,\n  doctype: ignore,\n\n  applet: ignore,\n  area: ignore,\n  basefont: ignore,\n  bgsound: ignore,\n  caption: ignore,\n  col: ignore,\n  colgroup: ignore,\n  command: ignore,\n  content: ignore,\n  datalist: ignore,\n  dialog: ignore,\n  element: ignore,\n  embed: ignore,\n  frame: ignore,\n  frameset: ignore,\n  isindex: ignore,\n  keygen: ignore,\n  link: ignore,\n  math: ignore,\n  menu: ignore,\n  menuitem: ignore,\n  meta: ignore,\n  nextid: ignore,\n  noembed: ignore,\n  noframes: ignore,\n  optgroup: ignore,\n  option: ignore,\n  param: ignore,\n  script: ignore,\n  shadow: ignore,\n  source: ignore,\n  spacer: ignore,\n  style: ignore,\n  svg: ignore,\n  template: ignore,\n  title: ignore,\n  track: ignore,\n\n  abbr: all,\n  acronym: all,\n  bdi: all,\n  bdo: all,\n  big: all,\n  blink: all,\n  button: all,\n  canvas: all,\n  cite: all,\n  data: all,\n  details: all,\n  dfn: all,\n  font: all,\n  ins: all,\n  label: all,\n  map: all,\n  marquee: all,\n  meter: all,\n  nobr: all,\n  noscript: all,\n  object: all,\n  output: all,\n  progress: all,\n  rb: all,\n  rbc: all,\n  rp: all,\n  rt: all,\n  rtc: all,\n  ruby: all,\n  slot: all,\n  small: all,\n  span: all,\n  sup: all,\n  sub: all,\n  tbody: all,\n  tfoot: all,\n  thead: all,\n  time: all,\n\n  address: wrapChildren,\n  article: wrapChildren,\n  aside: wrapChildren,\n  body: wrapChildren,\n  center: wrapChildren,\n  div: wrapChildren,\n  fieldset: wrapChildren,\n  figcaption: wrapChildren,\n  figure: wrapChildren,\n  form: wrapChildren,\n  footer: wrapChildren,\n  header: wrapChildren,\n  hgroup: wrapChildren,\n  html: wrapChildren,\n  legend: wrapChildren,\n  main: wrapChildren,\n  multicol: wrapChildren,\n  nav: wrapChildren,\n  picture: wrapChildren,\n  section: wrapChildren,\n\n  a,\n  audio: media,\n  b: strong,\n  base,\n  blockquote,\n  br,\n  code: inlineCode,\n  dir: list,\n  dl,\n  dt: li,\n  dd: li,\n  del,\n  em,\n  h1: heading,\n  h2: heading,\n  h3: heading,\n  h4: heading,\n  h5: heading,\n  h6: heading,\n  hr,\n  i: em,\n  iframe,\n  img,\n  image: img,\n  input,\n  kbd: inlineCode,\n  li,\n  listing: code,\n  mark: em,\n  ol: list,\n  p,\n  plaintext: code,\n  pre: code,\n  q,\n  s: del,\n  samp: inlineCode,\n  select,\n  strike: del,\n  strong,\n  summary: p,\n  table,\n  td: tableCell,\n  textarea,\n  th: tableCell,\n  tr: tableRow,\n  tt: inlineCode,\n  u: em,\n  ul: list,\n  var: inlineCode,\n  video: media,\n  wbr,\n  xmp: code\n}\n\nfunction ignore() {}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Root} Root\n */\n\nimport {all} from '../all.js'\nimport {wrap, wrapNeeded} from '../util/wrap.js'\n\n/**\n * @type {Handle}\n * @param {Root} node\n */\nexport function root(h, node) {\n  let children = all(h, node)\n\n  if (h.document || wrapNeeded(children)) {\n    children = wrap(children)\n  }\n\n  return h(node, 'root', children)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h(node, 'text', wrapText(h, node.value))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Comment} Comment\n */\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Comment} node\n */\nexport function comment(h, node) {\n  return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function a(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(\n    node,\n    'link',\n    {\n      title: props.title || null,\n      url: resolve(h, String(props.href || '') || null)\n    },\n    all(h, node)\n  )\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function base(h, node) {\n  if (!h.baseFound) {\n    h.frozenBaseUrl =\n      String((node.properties && node.properties.href) || '') || null\n    h.baseFound = true\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {wrapChildren} from '../util/wrap-children.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrapChildren(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function br(h, node) {\n  return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function hr(h, node) {\n  return h(node, 'thematicBreak')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function iframe(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  const src = String(props.src || '')\n  const title = String(props.title || '')\n\n  // Only create a link if there is a title.\n  // We can’t use the content of the frame because conforming HTML parsers treat\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\n  // contain tags that will show up in text.\n  if (src && title) {\n    return {\n      type: 'link',\n      title: null,\n      url: resolve(h, src),\n      children: [{type: 'text', value: wrapText(h, title)}]\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function q(h, node) {\n  const expected = h.quotes[h.qNesting % h.quotes.length]\n\n  h.qNesting++\n  const contents = all(h, node)\n  h.qNesting--\n\n  contents.unshift({type: 'text', value: expected.charAt(0)})\n\n  contents.push({\n    type: 'text',\n    value: expected.length > 1 ? expected.charAt(1) : expected\n  })\n\n  return contents\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function select(h, node) {\n  const values = findSelectedOptions(h, node)\n  let index = -1\n  /** @type {Array.<string>} */\n  const results = []\n  /** @type {[string, string|null]} */\n  let value\n\n  while (++index < values.length) {\n    value = values[index]\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n  }\n\n  if (results.length > 0) {\n    return h(node, 'text', wrapText(h, results.join(', ')))\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function textarea(h, node) {\n  return h(node, 'text', wrapText(h, toText(node)))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableRow(h, node) {\n  return h(node, 'tableRow', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function wbr(h, node) {\n  return h(node, 'text', '\\u200B')\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Text} Text\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').HWithoutProps} HWithoutProps\n * @typedef {import('./types.js').HWithProps} HWithProps\n * @typedef {import('./types.js').MdastNode} MdastNode\n * @typedef {import('./types.js').MdastRoot} MdastRoot\n */\n\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {convert} from 'unist-util-is'\nimport {visit} from 'unist-util-visit'\nimport {one} from './one.js'\nimport {handlers} from './handlers/index.js'\nimport {own} from './util/own.js'\n\nexport {one} from './one.js'\nexport {all} from './all.js'\n\nconst block = convert(['heading', 'paragraph', 'root'])\n\n/**\n * @param {Node} tree\n * @param {Options} [options]\n */\nexport function toMdast(tree, options = {}) {\n  /** @type {Object.<string, Element>} */\n  const byId = {}\n  /** @type {MdastNode|MdastRoot} */\n  let mdast\n\n  /**\n   * @type {H}\n   */\n  const h = Object.assign(\n    /**\n     * @type {HWithProps & HWithoutProps}\n     */\n    (\n      /**\n       * @param {Node} node\n       * @param {string} type\n       * @param {Properties|string|Array.<Node>} [props]\n       * @param {string|Array.<Node>} [children]\n       */\n      (node, type, props, children) => {\n        /** @type {Properties|undefined} */\n        let properties\n\n        if (typeof props === 'string' || Array.isArray(props)) {\n          children = props\n          properties = {}\n        } else {\n          properties = props\n        }\n\n        /** @type {Node} */\n        // @ts-expect-error Assume valid `type` and `children`/`value`.\n        const result = {type, ...properties}\n\n        if (typeof children === 'string') {\n          // @ts-expect-error: Looks like a literal.\n          result.value = children\n        } else if (children) {\n          // @ts-expect-error: Looks like a parent.\n          result.children = children\n        }\n\n        if (node.position) {\n          result.position = node.position\n        }\n\n        return result\n      }\n    ),\n    {\n      nodeById: byId,\n      baseFound: false,\n      inTable: false,\n      wrapText: true,\n      /** @type {string|null} */\n      frozenBaseUrl: null,\n      qNesting: 0,\n      handlers: options.handlers\n        ? {...handlers, ...options.handlers}\n        : handlers,\n      document: options.document,\n      checked: options.checked || '[x]',\n      unchecked: options.unchecked || '[ ]',\n      quotes: options.quotes || ['\"']\n    }\n  )\n\n  visit(tree, 'element', (node) => {\n    const id =\n      node.properties &&\n      'id' in node.properties &&\n      String(node.properties.id).toUpperCase()\n\n    if (id && !own.call(byId, id)) {\n      byId[id] = node\n    }\n  })\n\n  // @ts-expect-error: does return a transformer, that does accept any node.\n  rehypeMinifyWhitespace({newlines: options.newlines === true})(tree)\n\n  const result = one(h, tree, undefined)\n\n  if (!result) {\n    mdast = {type: 'root', children: []}\n  } else if (Array.isArray(result)) {\n    mdast = {type: 'root', children: result}\n  } else {\n    mdast = result\n  }\n\n  visit(mdast, 'text', ontext)\n\n  return mdast\n\n  /**\n   * Collapse text nodes, and fix whitespace.\n   * Most of this is taken care of by `rehype-minify-whitespace`, but\n   * we’re generating some whitespace too, and some nodes are in the end\n   * ignored.\n   * So clean up.\n   *\n   * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}\n   */\n  function ontext(node, index, parent) {\n    /* c8 ignore next 3 */\n    if (index === null || !parent) {\n      return\n    }\n\n    const previous = parent.children[index - 1]\n\n    if (previous && previous.type === node.type) {\n      previous.value += node.value\n      parent.children.splice(index, 1)\n\n      if (previous.position && node.position) {\n        previous.position.end = node.position.end\n      }\n\n      // Iterate over the previous node again, to handle its total value.\n      return index - 1\n    }\n\n    node.value = node.value.replace(/[\\t ]*(\\r?\\n|\\r)[\\t ]*/, '$1')\n\n    // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),\n    // as there the whitespace matters.\n    if (parent && block(parent)) {\n      if (!index) {\n        node.value = node.value.replace(/^[\\t ]+/, '')\n      }\n\n      if (index === parent.children.length - 1) {\n        node.value = node.value.replace(/[\\t ]+$/, '')\n      }\n    }\n\n    if (!node.value) {\n      parent.children.splice(index, 1)\n      return index\n    }\n  }\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('hast-util-to-mdast').Options} Options\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n */\n\nimport {toMdast} from 'hast-util-to-mdast'\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new mdast\n * tree (bridge-mode).\n * Without destination, returns the mdast tree: further plugins run on that\n * tree (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `hast-util-to-mdast`.\n */\nconst rehypeRemark =\n  /**\n   * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}\n   */\n  (\n    /**\n     * @param {Processor|Options} [destination]\n     * @param {Options} [options]\n     */\n    function (destination, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {Processor|undefined} */\n      let processor\n\n      if (typeof destination === 'function') {\n        processor = destination\n        settings = options || {}\n      } else {\n        settings = destination || {}\n      }\n\n      if (settings.document === undefined || settings.document === null) {\n        settings = Object.assign({}, settings, {document: true})\n      }\n\n      return processor ? bridge(processor, settings) : mutate(settings)\n    }\n  )\n\nexport default rehypeRemark\n\n/**\n * Bridge-mode.\n * Runs the destination with the new mdast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], HastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toMdast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the mdast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>}\n */\nfunction mutate(options = {}) {\n  return (node) => {\n    const result = /** @type {MdastRoot} */ (toMdast(node, options))\n    return result\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    !state.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {HTML} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(state)\n    : checkBulletOther(state)\n  const bulletLastUsed = state.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrderedOther(state) {\n  const bulletOrdered = checkBulletOrdered(state)\n  const bulletOrderedOther = state.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some((d) => phrasing(d))\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  // @ts-expect-error: `root`s are supposed to have one type of content\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Text} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n * @typedef {import('./types.js').ConstructName} ConstructName\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowContent} FlowContent\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').PhrasingContent} PhrasingContent\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Node} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    safe: safeBound,\n    stack: [],\n    unsafe: [],\n    join: [],\n    // @ts-expect-error: we’ll fill it next.\n    handlers: {},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: we’ll add `handle` later.\n    handle: undefined\n  }\n\n  configure(state, {unsafe, join, handlers})\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    configure(state, {join: [joinDefinition]})\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} node\n * @returns {never}\n */\nfunction unknown(node) {\n  // @ts-expect-error: fine.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error | null | undefined} [error]\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    this.fatal\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array.<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a2bc1d8/types/node/globals.d.ts#L174>\n *\n * @typedef {string|Uint8Array} VFileValue\n *   Contents of the file.\n *   Can either be text, or a Buffer like structure.\n *   This does not directly use type `Buffer`, because it can also be used in a\n *   browser context.\n *   Instead this leverages `Uint8Array` which is the base type for `Buffer`,\n *   and a native JavaScript construct.\n *\n * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {VFileValue} [value]\n * @property {string} [cwd]\n * @property {Array.<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Object.<string, unknown>} [data]\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Object.<string, unknown>} VFileReporterSettings\n * @typedef {<T = VFileReporterSettings>(files: VFile[], options: T) => string} VFileReporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All other given fields are set on the newly created `VFile`.\n   *\n   * Path related properties are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {VFileCompatible} [value]\n   */\n  constructor(value) {\n    /** @type {VFileOptions} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information.\n     * It’s OK to store custom data directly on the file, moving it to `data`\n     * gives a little more privacy.\n     * @type {Object.<string, unknown>}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array.<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of file paths the file moved between.\n     * @type {Array.<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path`.\n     * Defaults to `process.cwd()` (`/` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {VFileValue}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `RawSourceMap` type from the `source-map` module.\n     * @type {unknown}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Access full path (`~/index.min.js`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set full path (`~/index.min.js`).\n   * Cannot be nullified.\n   *\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Access parent path (`~`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set parent path (`~`).\n   * Cannot be set if there's no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Access basename (including extname) (`index.min.js`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (`index.min.js`).\n   * Cannot contain path separators.\n   * Cannot be nullified either (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Access extname (including dot) (`.js`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set extname (including dot) (`.js`).\n   * Cannot be set if there's no `path` yet and cannot contain path separators.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Access stem (w/o extname) (`index.min`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set stem (w/o extname) (`index.min`).\n   * Cannot be nullified, and cannot contain path separators.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.\n   * @returns {string}\n   */\n  toString(encoding) {\n    // @ts-expect-error string’s don’t accept the parameter, but buffers do.\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Create a message and associates it w/ the file.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Info: create a message, associate it with the file, and mark the fatality\n   * as `null`.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Fail: create a message, associate it with the file, mark the fatality as\n   * `true`.\n   * Note: fatal errors mean a file is no longer processable.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {never}\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\nexport {isUrl}\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: any[]) => void} Callback\n * @typedef {(...input: any[]) => any} Middleware\n *\n * @typedef {(...input: any[]) => void} Run Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Middleware[]} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {any[]} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @param {any[]} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware(...parameters)\n    } catch (error) {\n      /** @type {Error} */\n      const exception = error\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","import fixGoogleHtml from './fix-google-html.js';\n// rehype-dom-parse is a lightweight version of rehype-parse that leverages\n// browser APIs -- reduces bundle size by ~200 kB!\nimport parse from 'rehype-dom-parse';\nimport { all } from 'rehype-remark';\nimport rehype2remarkWithSpaces from './rehype-to-remark-with-spaces.js';\nimport remarkGfm from 'remark-gfm';\nimport stringify from 'remark-stringify';\nimport { unified } from 'unified';\n\n/** @typedef {import(\"mdast-util-to-markdown\").State} MdastState */\n/** @typedef {import(\"unist\").Node} UnistNode */\n\nfunction preserveTagAndConvertContents (h, node) {\n  return [\n    h(node, 'html', `<${node.tagName}>`),\n    ...all(h, node),\n    h(node, 'html', `</${node.tagName}>`)\n  ];\n}\n\nfunction headingWithId (h, node) {\n  const children = all(h, node)\n\n  if (node?.properties?.id) {\n    children.push(h(node, 'html', `<a id=\"${node.properties.id}\"></a>`))\n  }\n\n  return h(node, 'heading', { depth: parseInt(node.tagName.slice(1)) }, children)\n}\n\n/**\n * Use two blank lines before headings. This is a \"join\" function, which tells\n * remark-stringify how to join adjacent nodes.\n * @param {UnistNode} previous\n * @param {UnistNode} next\n * @param {UnistNode} _parent\n * @param {MdastState} _state\n * @returns {boolean|number|void}\n */\nfunction doubleBlankLinesBeforeHeadings (previous, next, _parent, _state) {\n  if (previous.type !== 'heading' && next.type === 'heading') {\n    return 2;\n  }\n  return undefined;\n}\n\nconst processor = unified()\n  .use(parse)\n  .use(fixGoogleHtml)\n  // .use(require('./lib/log-tree').default)\n  .use(rehype2remarkWithSpaces, {\n    handlers: {\n      // Preserve sup/sub markup; most Markdowns have no markup for it.\n      sub: preserveTagAndConvertContents,\n      sup: preserveTagAndConvertContents,\n      h1: headingWithId,\n      h2: headingWithId,\n      h3: headingWithId,\n      h4: headingWithId,\n      h5: headingWithId,\n      h6: headingWithId\n    }\n  })\n  .use(remarkGfm)\n  .use(stringify, {\n    bullet: '-',\n    emphasis: '_',\n    listItemIndent: '1',\n    strong: '*',\n    join: [doubleBlankLinesBeforeHeadings]\n  });\n\n/**\n * Parse a Google Docs Slice Clip (the Google Docs internal format for\n * representing copied documents or selections from a document). This parses a\n * string representing the document and unwraps it if enclosed in a wrapper\n * object. You can pass in a string or object.\n * @param {any} raw\n * @returns {any}\n */\nfunction parseGdocsSliceClip(raw) {\n  const wrapper = typeof raw === 'string' ? JSON.parse(raw) : raw;\n  const data = typeof wrapper.data === 'string' ? JSON.parse(wrapper.data) : wrapper.data;\n\n  // Do a basic check to ensure we are dealing with what we think we are. This\n  // is not meant to be exhaustive or to check the exact schema.\n  if (\n    typeof data?.resolved?.dsl_entitypositionmap !== 'object'\n    || typeof data?.resolved?.dsl_spacers !== 'string'\n    || !Array.isArray(data?.resolved?.dsl_styleslices)\n  ) {\n    throw new SyntaxError(`Document does not appear to be a GDocs Slice Clip: ${JSON.stringify(raw)}`);\n  }\n\n  return data;\n}\n\nexport function convertDocsHtmlToMarkdown(html, rawSliceClip) {\n  const sliceClip = rawSliceClip ? parseGdocsSliceClip(rawSliceClip) : null;\n  return processor.process({\n    value: html,\n    data: {\n      sliceClip\n    }\n  }).then(result => result.value);\n}\n","import rehypeRemark from 'rehype-remark';\n\n/**\n * The official rehype-remark plugin gets a little aggeressive with removing\n * spaces, so this wraps it with some space preservation.\n *\n * Ideally, this needs to be solved upstream in rehype-remark.\n * TODO: create a minimal test case and file a bug there!\n */\nexport default function rehype2remarkWithSpaces () {\n  const spaceToken = '++IAMASPACE++';\n\n  function preserveInitialSpaces (node) {\n    if (node.type === 'text' && node.value.startsWith(' ')) {\n      if (node.value.startsWith(' ')) {\n        node.value = spaceToken + node.value.slice(1);\n      }\n      if (node.value.endsWith(' ')) {\n        node.value = node.value.slice(0, -1) + spaceToken;\n      }\n    }\n    if (node.children) {\n      node.children.forEach(preserveInitialSpaces);\n    }\n  }\n\n  function recreateSpaces (node) {\n    if (node.value && typeof node.value === 'string') {\n      node.value = node.value.split(spaceToken).join(' ');\n    }\n    if (node.children) {\n      node.children.forEach(recreateSpaces);\n    }\n  }\n\n  const convert = rehypeRemark.apply(this, arguments);\n  return function (tree, file) {\n    preserveInitialSpaces(tree);\n    const markdownTree = convert.apply(this, [tree, file]);\n    recreateSpaces(markdownTree);\n    return markdownTree;\n  };\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|void[], Node, string>}\n */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n","import { convertDocsHtmlToMarkdown } from './lib/convert.js';\nimport debug from 'debug'\n\nconst SLICE_CLIP_MEDIA_TYPE = 'application/x-vnd.google-docs-document-slice-clip';\n\nconst log = debug('app:index:debug')\n\nconst inputElement = document.getElementById('input');\nconst outputElement = document.getElementById('output');\nconst inputInstructions = document.querySelector('#input-area .instructions');\nconst outputInstructions = document.querySelector('#output-area .instructions');\n\n// Hold most recently pasted Slice Clip (the Google Docs internal copy/paste\n// format) globally so we can re-use it if the user hand-edits the input.\nlet latestSliceClip = null\ninputElement.addEventListener('paste', event => {\n  if (!event.clipboardData) {\n    console.warn('Could not access clipboard data from paste event');\n    return;\n  }\n\n  // Allow for raw or wrapped slice clips (one uses a \"+wrapped\" suffix).\n  const sliceClipType = event.clipboardData.types.find(type =>\n    type.startsWith(SLICE_CLIP_MEDIA_TYPE)\n  );\n  log('Slice clip media type: %s', sliceClipType);\n  if (sliceClipType) {\n    const sliceClip = event.clipboardData.getData(sliceClipType);\n    log('raw slice clip: %s', sliceClip);\n    latestSliceClip = sliceClip;\n  }\n});\n\ninputElement.addEventListener('input', () => {\n  const hasContent = !!inputElement.textContent;\n  inputInstructions.style.display = hasContent ? 'none' : '';\n\n  convertDocsHtmlToMarkdown(inputElement.innerHTML, latestSliceClip)\n    .then(markdown => {\n      outputElement.value = markdown;\n      outputInstructions.style.display = markdown.trim() ? 'none' : '';\n    })\n    .catch(error => {\n      console.error(error);\n      outputInstructions.style.display = '';\n    });\n});\n\nwindow.convertDocsHtmlToMarkdown = convertDocsHtmlToMarkdown;\n\nconst copyButton = document.getElementById('copy-button');\nif (navigator.clipboard && navigator.clipboard.writeText) {\n  copyButton.style.display = '';\n  copyButton.addEventListener('click', () => {\n    navigator.clipboard.writeText(outputElement.value).catch((error) => {\n      alert(`Unable to copy markdown to clipboard: ${error}`);\n    });\n  });\n}\n\nconst downloadButton = document.getElementById('download-button');\nif (window.URL && window.File) {\n  downloadButton.style.display = '';\n  downloadButton.addEventListener('click', () => {\n    const file = new File([outputElement.value], 'Converted Text.md', {\n      type: 'text/markdown',\n    });\n\n    // Make a link to the file and click it to trigger a download. Chrome has a\n    // fancy API for opening a save dialog, but other browsers do not, and this\n    // is the most universal way to download a file created in the front-end.\n    let url, link;\n    try {\n      url = URL.createObjectURL(file);\n      link = document.createElement('a');\n      link.href = url;\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n    }\n    finally {\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  });\n}\n"],"names":["exports","formatArgs","args","this","useColors","namespace","module","humanize","diff","c","color","splice","index","lastC","replace","match","save","namespaces","storage","setItem","removeItem","error","load","r","getItem","process","env","DEBUG","window","type","__nwjs","navigator","userAgent","toLowerCase","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","parseInt","RegExp","$1","localStorage","localstorage","destroy","warned","warn","colors","log","debug","formatters","j","v","JSON","stringify","message","createDebug","prevTime","namespacesCache","enabledCache","enableOverride","enabled","self","curr","Number","Date","ms","prev","coerce","unshift","format","formatter","val","call","apply","selectColor","extend","Object","defineProperty","enumerable","configurable","get","set","init","delimiter","newDebug","toNamespace","regexp","toString","substring","length","default","Error","stack","disable","names","map","skips","join","enable","i","split","len","push","slice","name","test","keys","forEach","key","hash","charCodeAt","Math","abs","hasOwn","prototype","hasOwnProperty","toStr","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","value","newValue","writable","getProperty","src","copy","copyIsArray","clone","arguments","deep","isBuffer","s","m","h","d","plural","msAbs","n","isPlural","round","str","String","exec","parseFloat","parse","isFinite","long","fmtShort","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","o","prop","Symbol","toStringTag","Schema","property","normal","space","merge","definitions","assign","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","DefinedInfo","mask","super","mark","values","own","create","info","properties","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextMenu","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","start","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","token","tokens","input","indexOf","trim","search","valid","dash","cap","find","schema","Type","charAt","camelcase","toUpperCase","datasetToProperty","kebab","datasetToAttribute","$0","buttonTypes","Set","createH","defaultTagName","caseSensitive","adjust","createAdjustMap","selector","children","node","child","props","previous","tagName","lastIndex","subvalue","parseSelector","has","addProperty","addChild","isNaN","parsePrimitive","concat","finalResult","nodes","convert","ok","castFactory","tests","parameters","anyFactory","check","checkAsRecord","nodeAsRecord","propsFactory","testFunction","parent","Boolean","looksLikeANode","empty","CONTINUE","EXIT","SKIP","visitParents","tree","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","regex","BananaSlug","occurrences","reset","slug","maintainCase","originalSlug","isBlank","getResolvedStyleProperty","propertyName","ancestors","_resolvedStyle","_style","groups","parseCssPropertyList","getNodeStyle","parentAncestors","resolveNodeStyle","Proxy","_receiver","blockElements","spaceSensitiveElements","isList","isBlock","isSpaceSensitive","isCell","isAnchor","spaceAtStartPattern","spaceAtEndPattern","wrapChildren","wrapper","unwrapLineBreaks","removeLineBreaksBeforeBlocks","_extractInvalidSpace","totalSpace","spaceMatch","body","getNodeTextAlignment","alignMatch","isAllTextCode","hasText","childResult","createCodeBlocks","codeBlocks","activeCodeBlock","block","contents","flatMap","isChecklistItem","getTextContent","webNamespaces","mathml","core","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","nodeType","namespaceURI","fn","getAttributeNames","getAttribute","root","nodeValue","comment","childNodes","createFragment","htmlString","createDocument","DOMParser","parseFromString","wrapText","one","dataMdast","handlers","unknown","isElement","context","convertElement","POSITIVE_INFINITY","embedded","blocks","skippable","ignorableNode","rehypeMinifyWhitespace","collapse","collapseFactory","newlines","replaceNewlines","replaceWhitespace","minify","whitespace","settings","blocklike","before","after","inferWhiteSpace","collapsableAfter","remove","ignore","stripAtStart","removable","minifyText","inferBoundary","thing","character","phrasing","runs","head","wrapNeeded","onphrasing","onnonphrasing","nonphrasing","identity","flattened","flatten","queue","rest","resolve","url","frozenBaseUrl","URL","findAfter","searchLineFeeds","searchTabOrSpaces","p","cell","row","notRendered","blockOrCaption","toText","inferWhitespace","breakBefore","breakAfter","count","collectText","innerTextCollection","repeat","suffix","items","collectElement","collectPreText","lines","trimAndCollapseSpacesAndTabs","pre","isCode","classList","meta","del","listItemsSpread","spread","wrapListItems","div","dt","dd","handle","ordered","em","heading","depth","img","inlineCode","hasProperty","findSelectedOptions","findOptions","selectedOptions","option","datalist","li","checkbox","ol","includeImageAlt","source","video","linkInFallbackContent","strong","tableCell","thead","tr","toCells","doctype","applet","area","basefont","bgsound","caption","col","colgroup","command","dialog","element","embed","frameset","isindex","keygen","math","menu","menuitem","nextid","noembed","noframes","optgroup","param","script","shadow","spacer","template","track","acronym","bdi","bdo","big","blink","button","canvas","details","dfn","font","ins","marquee","meter","nobr","noscript","output","progress","rb","rbc","rp","rt","rtc","ruby","small","sup","sub","tbody","tfoot","time","address","article","aside","center","fieldset","figcaption","figure","footer","header","hgroup","legend","main","multicol","nav","picture","section","a","audio","b","base","baseFound","blockquote","br","dl","clean","group","titles","h1","h2","h3","h4","h5","h6","hr","iframe","image","texts","nodeById","kbd","listing","plaintext","q","expected","quotes","qNesting","samp","select","strike","inTable","headless","rowIndex","cellIndex","inspect","toRows","columns","cells","otherRowIndex","colIndex","newCells","alignIndex","td","textarea","th","tt","u","ul","var","wbr","xmp","toMdast","byId","mdast","position","unchecked","destination","processor","file","next","run","bridge","mutate","chunkStart","syntaxExtension","all","extension","hook","left","right","constructs","existing","add","asciiAlpha","regexCheck","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","fromCharCode","wwwPrefix","tokenize","effects","nok","wwwPrefixInside","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","trail","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","events","enter","attempt","wwwAfter","exit","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","gfmAutolinkLiteral","_balanced","_gfmAutolinkLiteralWalkedInto","factorySpace","limit","blankLine","normalizeIdentifier","indent","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","parser","gfmFootnotes","labelStart","now","codePointAt","resolveToPotentialGfmFootnoteCall","marker","column","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","classifyCharacter","resolveAll","called","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","editMap","at","addImpl","sort","vecs","pop","gfmTableAlign","inDelimiterRow","gfmTable","flow","sizeB","bodyRowStart","headRowBefore","lazy","line","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","ccount","TypeError","toExpression","toFunction","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","ignored","pairs","toPairs","pairIndex","grandparent","change","matchObject","global","findAndReplace","findUrl","findEmail","literalAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","parts","isCorrectDomain","trailExec","closingParenIndex","openingParens","closingParens","splitUrl","email","createElement","characterEscapeOrReference","decode","$2","hex","decodeNumericCharacterReference","characterReference","innerHTML","textContent","decodeNamedCharacterReference","association","containerFlow","state","indexStack","tracker","createTracker","move","current","bulletLastUsed","between","eol","indentLines","patternCompile","_compiled","atBreak","patternInScope","listInScope","none","safe","positions","infos","expression","numerical","escapeBackslashes","encode","whole","lineShift","chunks","shift","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","subexit","footnoteDefinition","blank","containerPhrasing","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","sequence","defaultStringLength","toAlignment","gfmTableFromMarkdown","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","columnIndex","delimiterStart","delimiterEnd","markdownTable","checkBullet","bullet","listItem","listItemIndent","checkListItemIndent","bulletCurrent","incrementListMarker","ceil","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","configure","extensions","hardBreak","_1","formatCodeAsIndented","fences","checkQuote","quote","emphasis","checkEmphasis","formatHeadingAsSetext","literalWithBreak","setext","imageReference","referenceType","reference","associationId","formatLinkAsAutolink","raw","resourceLink","linkReference","checkBulletOrdered","bulletOrdered","checkRule","rule","checkStrong","break","fence","checkFence","longestStreak","rank","lastIndexOf","closeAtx","bulletOther","bulletOrderedOther","checkBulletOrderedOther","checkBulletOther","useDifferentMarker","firstListItem","item","some","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","fullPhrasingSpans","invalid","joinDefinition","containerPhrasingBound","containerFlowBound","safeBound","bail","getPrototypeOf","iterator","stringifyPosition","point","pos","VFileMessage","reason","place","ruleId","fatal","note","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","proc","isUrl","fileURLOrPath","VFile","messages","history","cwd","stored","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","assertNonEmpty","assertPart","stem","encoding","fail","part","sep","unified","transformers","fns","pipeline","middlewareIndex","callback","middleware","fnExpectsCallback","done","Promise","then","use","middelware","trough","attachers","frozen","freezeIndex","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","addPlugin","addList","addPreset","plugin","plugins","entry","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","runSync","complete","assertDone","processSync","asyncName","looksLikeAVFile","preserveTagAndConvertContents","headingWithId","fragment","_file","isStyled","weight","verticalAlign","decorationLine","startsWith","childrenCount","convertInlineStylesToElements","_index","_parent","newChildren","activeNode","mergeConsecutiveInlineStyles","nextIndex","startSpace","endSpace","fixNestedLists","alignment","childAlignment","detectTableColumnAlignment","endingBr","beginningBr","moveLinebreaksOutsideOfAnchors","fixChecklists","sliceClip","internalHeadings","resolved","dsl_styleslices","styleslice","stsl_type","stsl_styles","ps_hdid","level","ps_hd","headings","every","slugger","headingIdMap","Map","internalHeading","newId","_error","host","internalHeadingId","fixInternalLinks","spaceToken","preserveInitialSpaces","endsWith","recreateSpaces","markdownTree","field","combineExtensions","continuation","resolveTo","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","tightDefinitions","zwitch","toMarkdown","_state","convertDocsHtmlToMarkdown","rawSliceClip","dsl_entitypositionmap","dsl_spacers","SyntaxError","parseGdocsSliceClip","inputElement","getElementById","outputElement","inputInstructions","querySelector","outputInstructions","latestSliceClip","addEventListener","clipboardData","sliceClipType","types","hasContent","markdown","catch","copyButton","clipboard","writeText","alert","downloadButton","File","createObjectURL","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}